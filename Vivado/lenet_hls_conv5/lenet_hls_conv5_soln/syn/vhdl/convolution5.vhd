-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution5 is
generic (
    C_M_AXI_DATA_A_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_C_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_D_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_D_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_D_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_D_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_D_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_D_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_D_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_D_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_D_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_C_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_D_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_D_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_B_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DATA_A_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_A_AWREADY : IN STD_LOGIC;
    m_axi_DATA_A_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_A_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_A_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_WVALID : OUT STD_LOGIC;
    m_axi_DATA_A_WREADY : IN STD_LOGIC;
    m_axi_DATA_A_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_DATA_WIDTH-1 downto 0);
    m_axi_DATA_A_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_A_WLAST : OUT STD_LOGIC;
    m_axi_DATA_A_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_A_ARREADY : IN STD_LOGIC;
    m_axi_DATA_A_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_A_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_A_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_A_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_A_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_RVALID : IN STD_LOGIC;
    m_axi_DATA_A_RREADY : OUT STD_LOGIC;
    m_axi_DATA_A_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_DATA_WIDTH-1 downto 0);
    m_axi_DATA_A_RLAST : IN STD_LOGIC;
    m_axi_DATA_A_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_A_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_BVALID : IN STD_LOGIC;
    m_axi_DATA_A_BREADY : OUT STD_LOGIC;
    m_axi_DATA_A_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_A_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_ID_WIDTH-1 downto 0);
    m_axi_DATA_A_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_A_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_B_AWREADY : IN STD_LOGIC;
    m_axi_DATA_B_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_B_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_WVALID : OUT STD_LOGIC;
    m_axi_DATA_B_WREADY : IN STD_LOGIC;
    m_axi_DATA_B_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_DATA_WIDTH-1 downto 0);
    m_axi_DATA_B_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_B_WLAST : OUT STD_LOGIC;
    m_axi_DATA_B_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_B_ARREADY : IN STD_LOGIC;
    m_axi_DATA_B_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_B_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_B_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_RVALID : IN STD_LOGIC;
    m_axi_DATA_B_RREADY : OUT STD_LOGIC;
    m_axi_DATA_B_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_DATA_WIDTH-1 downto 0);
    m_axi_DATA_B_RLAST : IN STD_LOGIC;
    m_axi_DATA_B_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_BVALID : IN STD_LOGIC;
    m_axi_DATA_B_BREADY : OUT STD_LOGIC;
    m_axi_DATA_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_B_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_ID_WIDTH-1 downto 0);
    m_axi_DATA_B_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_B_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_C_AWREADY : IN STD_LOGIC;
    m_axi_DATA_C_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_WVALID : OUT STD_LOGIC;
    m_axi_DATA_C_WREADY : IN STD_LOGIC;
    m_axi_DATA_C_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_C_WLAST : OUT STD_LOGIC;
    m_axi_DATA_C_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_C_ARREADY : IN STD_LOGIC;
    m_axi_DATA_C_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_C_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_C_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_C_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_C_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_RVALID : IN STD_LOGIC;
    m_axi_DATA_C_RREADY : OUT STD_LOGIC;
    m_axi_DATA_C_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_DATA_WIDTH-1 downto 0);
    m_axi_DATA_C_RLAST : IN STD_LOGIC;
    m_axi_DATA_C_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_C_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_BVALID : IN STD_LOGIC;
    m_axi_DATA_C_BREADY : OUT STD_LOGIC;
    m_axi_DATA_C_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_C_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_ID_WIDTH-1 downto 0);
    m_axi_DATA_C_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_C_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_D_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_D_AWREADY : IN STD_LOGIC;
    m_axi_DATA_D_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_D_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_D_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_D_ID_WIDTH-1 downto 0);
    m_axi_DATA_D_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_D_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_D_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_D_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_D_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_D_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_D_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_D_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_D_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_D_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_D_WVALID : OUT STD_LOGIC;
    m_axi_DATA_D_WREADY : IN STD_LOGIC;
    m_axi_DATA_D_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_D_DATA_WIDTH-1 downto 0);
    m_axi_DATA_D_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_D_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_D_WLAST : OUT STD_LOGIC;
    m_axi_DATA_D_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_D_ID_WIDTH-1 downto 0);
    m_axi_DATA_D_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_D_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_D_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_D_ARREADY : IN STD_LOGIC;
    m_axi_DATA_D_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_D_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_D_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_D_ID_WIDTH-1 downto 0);
    m_axi_DATA_D_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_D_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_D_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_D_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_D_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_D_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_D_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_D_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_D_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_D_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_D_RVALID : IN STD_LOGIC;
    m_axi_DATA_D_RREADY : OUT STD_LOGIC;
    m_axi_DATA_D_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_D_DATA_WIDTH-1 downto 0);
    m_axi_DATA_D_RLAST : IN STD_LOGIC;
    m_axi_DATA_D_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_D_ID_WIDTH-1 downto 0);
    m_axi_DATA_D_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_D_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_D_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_D_BVALID : IN STD_LOGIC;
    m_axi_DATA_D_BREADY : OUT STD_LOGIC;
    m_axi_DATA_D_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_D_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_D_ID_WIDTH-1 downto 0);
    m_axi_DATA_D_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_D_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolution5 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolution5,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=776408,HLS_SYN_TPT=none,HLS_SYN_MEM=140,HLS_SYN_DSP=5,HLS_SYN_FF=4929,HLS_SYN_LUT=5037}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (64 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (64 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (64 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (64 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (64 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (64 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (64 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (64 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (64 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (64 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (64 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal weights : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_A_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal DATA_A_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond11_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal DATA_B_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal exitcond7_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond10_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal exitcond6_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_D_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal exitcond1_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_D_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal DATA_D_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal DATA_A_AWREADY : STD_LOGIC;
    signal DATA_A_WREADY : STD_LOGIC;
    signal DATA_A_ARVALID : STD_LOGIC;
    signal DATA_A_ARREADY : STD_LOGIC;
    signal DATA_A_RVALID : STD_LOGIC;
    signal DATA_A_RREADY : STD_LOGIC;
    signal DATA_A_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_A_RLAST : STD_LOGIC;
    signal DATA_A_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_A_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_A_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_A_BVALID : STD_LOGIC;
    signal DATA_A_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_A_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_A_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_AWREADY : STD_LOGIC;
    signal DATA_B_WREADY : STD_LOGIC;
    signal DATA_B_ARVALID : STD_LOGIC;
    signal DATA_B_ARREADY : STD_LOGIC;
    signal DATA_B_RVALID : STD_LOGIC;
    signal DATA_B_RREADY : STD_LOGIC;
    signal DATA_B_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_B_RLAST : STD_LOGIC;
    signal DATA_B_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_B_BVALID : STD_LOGIC;
    signal DATA_B_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_B_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_B_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_AWREADY : STD_LOGIC;
    signal DATA_C_WREADY : STD_LOGIC;
    signal DATA_C_ARVALID : STD_LOGIC;
    signal DATA_C_ARREADY : STD_LOGIC;
    signal DATA_C_RVALID : STD_LOGIC;
    signal DATA_C_RREADY : STD_LOGIC;
    signal DATA_C_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_C_RLAST : STD_LOGIC;
    signal DATA_C_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C_BVALID : STD_LOGIC;
    signal DATA_C_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_C_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_C_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_D_AWVALID : STD_LOGIC;
    signal DATA_D_AWREADY : STD_LOGIC;
    signal DATA_D_WVALID : STD_LOGIC;
    signal DATA_D_WREADY : STD_LOGIC;
    signal DATA_D_ARREADY : STD_LOGIC;
    signal DATA_D_RVALID : STD_LOGIC;
    signal DATA_D_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_D_RLAST : STD_LOGIC;
    signal DATA_D_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_D_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_D_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_D_BVALID : STD_LOGIC;
    signal DATA_D_BREADY : STD_LOGIC;
    signal DATA_D_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_D_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_D_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1135 : STD_LOGIC_VECTOR (29 downto 0);
    signal DATA_C_addr_reg_1140 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_599_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_6_fu_611_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_1164 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_3_fu_654_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_reg_1177 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond12_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_DATA_A_ARREADY : STD_LOGIC;
    signal c5_i_addr_reg_1193 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal k_2_fu_687_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_2_reg_1201 : STD_LOGIC_VECTOR (2 downto 0);
    signal DATA_A_addr_read_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_701_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_cast_reg_1211 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_ioackin_DATA_C_ARREADY : STD_LOGIC;
    signal ap_block_state13_io : BOOLEAN;
    signal i_8_fu_711_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_8_reg_1219 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal j_4_fu_754_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_reg_1232 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal k_3_fu_787_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_3_reg_1245 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_24_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond8_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_DATA_B_ARREADY : STD_LOGIC;
    signal c5_w_addr_reg_1261 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state23 : BOOLEAN;
    signal l_1_fu_820_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_1_reg_1269 : STD_LOGIC_VECTOR (2 downto 0);
    signal DATA_B_addr_read_reg_1274 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast7_fu_826_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast7_reg_1279 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state31 : BOOLEAN;
    signal i_7_fu_836_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_reg_1287 : STD_LOGIC_VECTOR (6 downto 0);
    signal DATA_C_addr_read_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal co_cast6_fu_842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal co_cast6_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_23_cast_fu_854_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_cast_reg_1303 : STD_LOGIC_VECTOR (11 downto 0);
    signal co_1_fu_864_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_1_reg_1311 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_cast5_fu_870_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast5_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal i_3_cast5_cast_fu_874_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_cast5_cast_reg_1321 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_fu_884_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_reg_1329 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond4_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_cast4_cast1_fu_890_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_2_cast4_cast1_reg_1339 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal j_2_cast4_cast_fu_894_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_cast4_cast_reg_1344 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_fu_904_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_reg_1352 : STD_LOGIC_VECTOR (2 downto 0);
    signal c5_i_addr_1_reg_1357 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_37_fu_1001_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_37_reg_1362 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_38_fu_1005_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_38_reg_1367 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond2_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_1372 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_1_fu_1015_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_1_reg_1376 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal c5_w_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_w_load_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal c5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_i_load_reg_1391 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal c5_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_b_load_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_2_reg_1411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal i_4_cast2_fu_1043_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_cast2_reg_1416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_DATA_D_AWREADY : STD_LOGIC;
    signal ap_block_state55_io : BOOLEAN;
    signal i_9_fu_1054_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_9_reg_1424 : STD_LOGIC_VECTOR (6 downto 0);
    signal c5_intermediate_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_intermediate_0_0_3_reg_1439 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal tmp_6_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal i_12_fu_1129_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_12_reg_1454 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal exitcond_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_o_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_o_0_0_load_reg_1464 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal c5_i_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal c5_i_ce0 : STD_LOGIC;
    signal c5_i_we0 : STD_LOGIC;
    signal c5_w_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c5_w_ce0 : STD_LOGIC;
    signal c5_w_we0 : STD_LOGIC;
    signal c5_b_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c5_b_ce0 : STD_LOGIC;
    signal c5_b_we0 : STD_LOGIC;
    signal c5_o_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c5_o_0_0_ce0 : STD_LOGIC;
    signal c5_o_0_0_we0 : STD_LOGIC;
    signal c5_o_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c5_intermediate_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c5_intermediate_0_0_ce0 : STD_LOGIC;
    signal c5_intermediate_0_0_we0 : STD_LOGIC;
    signal i_reg_320 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_331 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond13_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_342 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_1_reg_353 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond9_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_364 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_reg_375 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_386 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_2_reg_397 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal co_reg_408 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal i_3_reg_419 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_442 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_1_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_465 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_2_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_488 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal i_5_reg_499 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_ioackin_DATA_D_WREADY : STD_LOGIC;
    signal tmp_19_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_cast_fu_964_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_cast_fu_1038_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_cast1_fu_1118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_1060_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_DATA_A_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_DATA_C_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_DATA_B_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_DATA_D_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_DATA_D_WREADY : STD_LOGIC := '0';
    signal grp_fu_510_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal bias5_fu_535_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal weights3_fu_555_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal input1_fu_569_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_587_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast_cast_fu_583_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_595_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast_cast_fu_617_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_621_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_630_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_cast_fu_626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl9_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_693_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_cast_cast_fu_717_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_721_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_fu_730_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_cast_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_738_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_cast9_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_764_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_769_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_cast8_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_846_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_918_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_926_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ci_cast3_cast_fu_914_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_930_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_936_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_945_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_30_cast_fu_941_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_953_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_32_fu_959_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ci_cast3_cast1_fu_910_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_fu_969_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_fu_978_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_fu_986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_cast_fu_974_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl6_cast_fu_1021_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_39_fu_1028_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_40_fu_1033_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_assign_to_int_fu_1070_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1073_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_1083_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component convolution5_fadddEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution5_fmuleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution5_fcmpfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convolution5_c5_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution5_c5_w IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution5_c5_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution5_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution5_DATA_A_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convolution5_DATA_B_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convolution5_DATA_C_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convolution5_DATA_D_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    convolution5_AXILiteS_s_axi_U : component convolution5_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_0,
        input_r => input_r,
        weights => weights,
        bias => bias,
        output_r => output_r);

    convolution5_DATA_A_m_axi_U : component convolution5_DATA_A_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_A_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_A_AWVALID,
        AWREADY => m_axi_DATA_A_AWREADY,
        AWADDR => m_axi_DATA_A_AWADDR,
        AWID => m_axi_DATA_A_AWID,
        AWLEN => m_axi_DATA_A_AWLEN,
        AWSIZE => m_axi_DATA_A_AWSIZE,
        AWBURST => m_axi_DATA_A_AWBURST,
        AWLOCK => m_axi_DATA_A_AWLOCK,
        AWCACHE => m_axi_DATA_A_AWCACHE,
        AWPROT => m_axi_DATA_A_AWPROT,
        AWQOS => m_axi_DATA_A_AWQOS,
        AWREGION => m_axi_DATA_A_AWREGION,
        AWUSER => m_axi_DATA_A_AWUSER,
        WVALID => m_axi_DATA_A_WVALID,
        WREADY => m_axi_DATA_A_WREADY,
        WDATA => m_axi_DATA_A_WDATA,
        WSTRB => m_axi_DATA_A_WSTRB,
        WLAST => m_axi_DATA_A_WLAST,
        WID => m_axi_DATA_A_WID,
        WUSER => m_axi_DATA_A_WUSER,
        ARVALID => m_axi_DATA_A_ARVALID,
        ARREADY => m_axi_DATA_A_ARREADY,
        ARADDR => m_axi_DATA_A_ARADDR,
        ARID => m_axi_DATA_A_ARID,
        ARLEN => m_axi_DATA_A_ARLEN,
        ARSIZE => m_axi_DATA_A_ARSIZE,
        ARBURST => m_axi_DATA_A_ARBURST,
        ARLOCK => m_axi_DATA_A_ARLOCK,
        ARCACHE => m_axi_DATA_A_ARCACHE,
        ARPROT => m_axi_DATA_A_ARPROT,
        ARQOS => m_axi_DATA_A_ARQOS,
        ARREGION => m_axi_DATA_A_ARREGION,
        ARUSER => m_axi_DATA_A_ARUSER,
        RVALID => m_axi_DATA_A_RVALID,
        RREADY => m_axi_DATA_A_RREADY,
        RDATA => m_axi_DATA_A_RDATA,
        RLAST => m_axi_DATA_A_RLAST,
        RID => m_axi_DATA_A_RID,
        RUSER => m_axi_DATA_A_RUSER,
        RRESP => m_axi_DATA_A_RRESP,
        BVALID => m_axi_DATA_A_BVALID,
        BREADY => m_axi_DATA_A_BREADY,
        BRESP => m_axi_DATA_A_BRESP,
        BID => m_axi_DATA_A_BID,
        BUSER => m_axi_DATA_A_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_A_ARVALID,
        I_ARREADY => DATA_A_ARREADY,
        I_ARADDR => tmp_15_reg_1182,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_5,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_A_RVALID,
        I_RREADY => DATA_A_RREADY,
        I_RDATA => DATA_A_RDATA,
        I_RID => DATA_A_RID,
        I_RUSER => DATA_A_RUSER,
        I_RRESP => DATA_A_RRESP,
        I_RLAST => DATA_A_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_A_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_A_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_A_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_A_BRESP,
        I_BID => DATA_A_BID,
        I_BUSER => DATA_A_BUSER);

    convolution5_DATA_B_m_axi_U : component convolution5_DATA_B_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_B_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_B_AWVALID,
        AWREADY => m_axi_DATA_B_AWREADY,
        AWADDR => m_axi_DATA_B_AWADDR,
        AWID => m_axi_DATA_B_AWID,
        AWLEN => m_axi_DATA_B_AWLEN,
        AWSIZE => m_axi_DATA_B_AWSIZE,
        AWBURST => m_axi_DATA_B_AWBURST,
        AWLOCK => m_axi_DATA_B_AWLOCK,
        AWCACHE => m_axi_DATA_B_AWCACHE,
        AWPROT => m_axi_DATA_B_AWPROT,
        AWQOS => m_axi_DATA_B_AWQOS,
        AWREGION => m_axi_DATA_B_AWREGION,
        AWUSER => m_axi_DATA_B_AWUSER,
        WVALID => m_axi_DATA_B_WVALID,
        WREADY => m_axi_DATA_B_WREADY,
        WDATA => m_axi_DATA_B_WDATA,
        WSTRB => m_axi_DATA_B_WSTRB,
        WLAST => m_axi_DATA_B_WLAST,
        WID => m_axi_DATA_B_WID,
        WUSER => m_axi_DATA_B_WUSER,
        ARVALID => m_axi_DATA_B_ARVALID,
        ARREADY => m_axi_DATA_B_ARREADY,
        ARADDR => m_axi_DATA_B_ARADDR,
        ARID => m_axi_DATA_B_ARID,
        ARLEN => m_axi_DATA_B_ARLEN,
        ARSIZE => m_axi_DATA_B_ARSIZE,
        ARBURST => m_axi_DATA_B_ARBURST,
        ARLOCK => m_axi_DATA_B_ARLOCK,
        ARCACHE => m_axi_DATA_B_ARCACHE,
        ARPROT => m_axi_DATA_B_ARPROT,
        ARQOS => m_axi_DATA_B_ARQOS,
        ARREGION => m_axi_DATA_B_ARREGION,
        ARUSER => m_axi_DATA_B_ARUSER,
        RVALID => m_axi_DATA_B_RVALID,
        RREADY => m_axi_DATA_B_RREADY,
        RDATA => m_axi_DATA_B_RDATA,
        RLAST => m_axi_DATA_B_RLAST,
        RID => m_axi_DATA_B_RID,
        RUSER => m_axi_DATA_B_RUSER,
        RRESP => m_axi_DATA_B_RRESP,
        BVALID => m_axi_DATA_B_BVALID,
        BREADY => m_axi_DATA_B_BREADY,
        BRESP => m_axi_DATA_B_BRESP,
        BID => m_axi_DATA_B_BID,
        BUSER => m_axi_DATA_B_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_B_ARVALID,
        I_ARREADY => DATA_B_ARREADY,
        I_ARADDR => tmp_24_reg_1250,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_5,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_B_RVALID,
        I_RREADY => DATA_B_RREADY,
        I_RDATA => DATA_B_RDATA,
        I_RID => DATA_B_RID,
        I_RUSER => DATA_B_RUSER,
        I_RRESP => DATA_B_RRESP,
        I_RLAST => DATA_B_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_B_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_B_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_B_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_B_BRESP,
        I_BID => DATA_B_BID,
        I_BUSER => DATA_B_BUSER);

    convolution5_DATA_C_m_axi_U : component convolution5_DATA_C_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_C_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_C_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_C_AWVALID,
        AWREADY => m_axi_DATA_C_AWREADY,
        AWADDR => m_axi_DATA_C_AWADDR,
        AWID => m_axi_DATA_C_AWID,
        AWLEN => m_axi_DATA_C_AWLEN,
        AWSIZE => m_axi_DATA_C_AWSIZE,
        AWBURST => m_axi_DATA_C_AWBURST,
        AWLOCK => m_axi_DATA_C_AWLOCK,
        AWCACHE => m_axi_DATA_C_AWCACHE,
        AWPROT => m_axi_DATA_C_AWPROT,
        AWQOS => m_axi_DATA_C_AWQOS,
        AWREGION => m_axi_DATA_C_AWREGION,
        AWUSER => m_axi_DATA_C_AWUSER,
        WVALID => m_axi_DATA_C_WVALID,
        WREADY => m_axi_DATA_C_WREADY,
        WDATA => m_axi_DATA_C_WDATA,
        WSTRB => m_axi_DATA_C_WSTRB,
        WLAST => m_axi_DATA_C_WLAST,
        WID => m_axi_DATA_C_WID,
        WUSER => m_axi_DATA_C_WUSER,
        ARVALID => m_axi_DATA_C_ARVALID,
        ARREADY => m_axi_DATA_C_ARREADY,
        ARADDR => m_axi_DATA_C_ARADDR,
        ARID => m_axi_DATA_C_ARID,
        ARLEN => m_axi_DATA_C_ARLEN,
        ARSIZE => m_axi_DATA_C_ARSIZE,
        ARBURST => m_axi_DATA_C_ARBURST,
        ARLOCK => m_axi_DATA_C_ARLOCK,
        ARCACHE => m_axi_DATA_C_ARCACHE,
        ARPROT => m_axi_DATA_C_ARPROT,
        ARQOS => m_axi_DATA_C_ARQOS,
        ARREGION => m_axi_DATA_C_ARREGION,
        ARUSER => m_axi_DATA_C_ARUSER,
        RVALID => m_axi_DATA_C_RVALID,
        RREADY => m_axi_DATA_C_RREADY,
        RDATA => m_axi_DATA_C_RDATA,
        RLAST => m_axi_DATA_C_RLAST,
        RID => m_axi_DATA_C_RID,
        RUSER => m_axi_DATA_C_RUSER,
        RRESP => m_axi_DATA_C_RRESP,
        BVALID => m_axi_DATA_C_BVALID,
        BREADY => m_axi_DATA_C_BREADY,
        BRESP => m_axi_DATA_C_BRESP,
        BID => m_axi_DATA_C_BID,
        BUSER => m_axi_DATA_C_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_C_ARVALID,
        I_ARREADY => DATA_C_ARREADY,
        I_ARADDR => DATA_C_addr_reg_1140,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_78,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_C_RVALID,
        I_RREADY => DATA_C_RREADY,
        I_RDATA => DATA_C_RDATA,
        I_RID => DATA_C_RID,
        I_RUSER => DATA_C_RUSER,
        I_RRESP => DATA_C_RRESP,
        I_RLAST => DATA_C_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_C_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_C_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_C_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_C_BRESP,
        I_BID => DATA_C_BID,
        I_BUSER => DATA_C_BUSER);

    convolution5_DATA_D_m_axi_U : component convolution5_DATA_D_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_D_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_D_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_D_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_D_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_D_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_D_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_D_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_D_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_D_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_D_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_D_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_D_AWVALID,
        AWREADY => m_axi_DATA_D_AWREADY,
        AWADDR => m_axi_DATA_D_AWADDR,
        AWID => m_axi_DATA_D_AWID,
        AWLEN => m_axi_DATA_D_AWLEN,
        AWSIZE => m_axi_DATA_D_AWSIZE,
        AWBURST => m_axi_DATA_D_AWBURST,
        AWLOCK => m_axi_DATA_D_AWLOCK,
        AWCACHE => m_axi_DATA_D_AWCACHE,
        AWPROT => m_axi_DATA_D_AWPROT,
        AWQOS => m_axi_DATA_D_AWQOS,
        AWREGION => m_axi_DATA_D_AWREGION,
        AWUSER => m_axi_DATA_D_AWUSER,
        WVALID => m_axi_DATA_D_WVALID,
        WREADY => m_axi_DATA_D_WREADY,
        WDATA => m_axi_DATA_D_WDATA,
        WSTRB => m_axi_DATA_D_WSTRB,
        WLAST => m_axi_DATA_D_WLAST,
        WID => m_axi_DATA_D_WID,
        WUSER => m_axi_DATA_D_WUSER,
        ARVALID => m_axi_DATA_D_ARVALID,
        ARREADY => m_axi_DATA_D_ARREADY,
        ARADDR => m_axi_DATA_D_ARADDR,
        ARID => m_axi_DATA_D_ARID,
        ARLEN => m_axi_DATA_D_ARLEN,
        ARSIZE => m_axi_DATA_D_ARSIZE,
        ARBURST => m_axi_DATA_D_ARBURST,
        ARLOCK => m_axi_DATA_D_ARLOCK,
        ARCACHE => m_axi_DATA_D_ARCACHE,
        ARPROT => m_axi_DATA_D_ARPROT,
        ARQOS => m_axi_DATA_D_ARQOS,
        ARREGION => m_axi_DATA_D_ARREGION,
        ARUSER => m_axi_DATA_D_ARUSER,
        RVALID => m_axi_DATA_D_RVALID,
        RREADY => m_axi_DATA_D_RREADY,
        RDATA => m_axi_DATA_D_RDATA,
        RLAST => m_axi_DATA_D_RLAST,
        RID => m_axi_DATA_D_RID,
        RUSER => m_axi_DATA_D_RUSER,
        RRESP => m_axi_DATA_D_RRESP,
        BVALID => m_axi_DATA_D_BVALID,
        BREADY => m_axi_DATA_D_BREADY,
        BRESP => m_axi_DATA_D_BRESP,
        BID => m_axi_DATA_D_BID,
        BUSER => m_axi_DATA_D_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DATA_D_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_D_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DATA_D_RDATA,
        I_RID => DATA_D_RID,
        I_RUSER => DATA_D_RUSER,
        I_RRESP => DATA_D_RRESP,
        I_RLAST => DATA_D_RLAST,
        I_AWVALID => DATA_D_AWVALID,
        I_AWREADY => DATA_D_AWREADY,
        I_AWADDR => tmp_26_fu_1060_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_78,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => DATA_D_WVALID,
        I_WREADY => DATA_D_WREADY,
        I_WDATA => c5_o_0_0_load_reg_1464,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => DATA_D_BVALID,
        I_BREADY => DATA_D_BREADY,
        I_BRESP => DATA_D_BRESP,
        I_BID => DATA_D_BID,
        I_BUSER => DATA_D_BUSER);

    c5_i_U : component convolution5_c5_i
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c5_i_address0,
        ce0 => c5_i_ce0,
        we0 => c5_i_we0,
        d0 => DATA_A_addr_read_reg_1206,
        q0 => c5_i_q0);

    c5_w_U : component convolution5_c5_w
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c5_w_address0,
        ce0 => c5_w_ce0,
        we0 => c5_w_we0,
        d0 => DATA_B_addr_read_reg_1274,
        q0 => c5_w_q0);

    c5_b_U : component convolution5_c5_b
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c5_b_address0,
        ce0 => c5_b_ce0,
        we0 => c5_b_we0,
        d0 => DATA_C_addr_read_reg_1292,
        q0 => c5_b_q0);

    c5_o_0_0_U : component convolution5_c5_b
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c5_o_0_0_address0,
        ce0 => c5_o_0_0_ce0,
        we0 => c5_o_0_0_we0,
        d0 => c5_o_0_0_d0,
        q0 => c5_o_0_0_q0);

    c5_intermediate_0_0_U : component convolution5_c5_b
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c5_intermediate_0_0_address0,
        ce0 => c5_intermediate_0_0_ce0,
        we0 => c5_intermediate_0_0_we0,
        d0 => tmp_2_reg_1411,
        q0 => c5_intermediate_0_0_q0);

    convolution5_fadddEe_U0 : component convolution5_fadddEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_510_p0,
        din1 => grp_fu_510_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_510_p2);

    convolution5_fmuleOg_U1 : component convolution5_fmuleOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => c5_w_load_reg_1386,
        din1 => c5_i_load_reg_1391,
        ce => ap_const_logic_1,
        dout => grp_fu_516_p2);

    convolution5_fcmpfYi_U2 : component convolution5_fcmpfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => c5_intermediate_0_0_3_reg_1439,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_6_fu_520_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_A_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_A_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_sig_ioackin_DATA_A_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_DATA_A_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = DATA_A_ARREADY)) then 
                        ap_reg_ioackin_DATA_A_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_B_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_B_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    if ((ap_sig_ioackin_DATA_B_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_DATA_B_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = DATA_B_ARREADY)) then 
                        ap_reg_ioackin_DATA_B_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_C_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_C_ARREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond10_fu_705_p2 = ap_const_lv1_1))) then
                    if ((ap_block_state13_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_DATA_C_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = DATA_C_ARREADY)) then 
                        ap_reg_ioackin_DATA_C_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_D_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_D_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_const_lv1_1 = exitcond1_fu_1048_p2))) then
                    if ((ap_block_state55_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_DATA_D_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = DATA_D_AWREADY)) then 
                        ap_reg_ioackin_DATA_D_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_D_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_D_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                    if ((ap_sig_ioackin_DATA_D_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_DATA_D_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = DATA_D_WREADY)) then 
                        ap_reg_ioackin_DATA_D_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_lv1_0 = exitcond3_fu_898_p2))) then 
                ci_reg_465 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                ci_reg_465 <= ci_1_reg_1376;
            end if; 
        end if;
    end process;

    co_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and not(((ap_const_lv1_0 = exitcond6_fu_830_p2) and (ap_const_logic_0 = DATA_C_RVALID))) and (ap_const_lv1_1 = exitcond6_fu_830_p2))) then 
                co_reg_408 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                co_reg_408 <= co_1_reg_1311;
            end if; 
        end if;
    end process;

    i_1_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond13_fu_605_p2))) then 
                i_1_reg_353 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond9_fu_748_p2))) then 
                i_1_reg_353 <= i_8_reg_1219;
            end if; 
        end if;
    end process;

    i_2_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_2_reg_397 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_2_reg_397 <= i_7_reg_1287;
            end if; 
        end if;
    end process;

    i_3_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = exitcond5_fu_858_p2))) then 
                i_3_reg_419 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_lv1_1 = exitcond3_fu_898_p2))) then 
                i_3_reg_419 <= m_reg_1329;
            end if; 
        end if;
    end process;

    i_4_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = exitcond5_fu_858_p2))) then 
                i_4_reg_488 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                i_4_reg_488 <= i_9_reg_1424;
            end if; 
        end if;
    end process;

    i_5_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_const_lv1_1 = exitcond1_fu_1048_p2) and (ap_block_state55_io = ap_const_boolean_0))) then 
                i_5_reg_499 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state61) and (ap_sig_ioackin_DATA_D_WREADY = ap_const_logic_1))) then 
                i_5_reg_499 <= i_12_reg_1454;
            end if; 
        end if;
    end process;

    i_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond12_fu_648_p2))) then 
                i_reg_320 <= i_6_reg_1164;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_320 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_1_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_block_state13_io = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond10_fu_705_p2))) then 
                j_1_reg_364 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond8_fu_781_p2))) then 
                j_1_reg_364 <= j_4_reg_1232;
            end if; 
        end if;
    end process;

    j_2_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_lv1_0 = exitcond4_fu_878_p2))) then 
                j_2_reg_442 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (ap_const_lv1_1 = exitcond2_reg_1372))) then 
                j_2_reg_442 <= n_reg_1352;
            end if; 
        end if;
    end process;

    j_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond13_fu_605_p2))) then 
                j_reg_331 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and not(((exitcond11_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_0 = DATA_A_RVALID))) and (exitcond11_fu_681_p2 = ap_const_lv1_1))) then 
                j_reg_331 <= j_3_reg_1177;
            end if; 
        end if;
    end process;

    k_1_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond9_fu_748_p2))) then 
                k_1_reg_375 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and not(((ap_const_lv1_0 = exitcond7_fu_814_p2) and (ap_const_logic_0 = DATA_B_RVALID))) and (exitcond7_fu_814_p2 = ap_const_lv1_1))) then 
                k_1_reg_375 <= k_3_reg_1245;
            end if; 
        end if;
    end process;

    k_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_reg_342 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_reg_342 <= k_2_reg_1201;
            end if; 
        end if;
    end process;

    l_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                l_reg_386 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                l_reg_386 <= l_1_reg_1269;
            end if; 
        end if;
    end process;

    sum_1_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_lv1_0 = exitcond4_fu_878_p2))) then 
                sum_1_reg_453 <= sum_reg_430;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (ap_const_lv1_1 = exitcond2_reg_1372))) then 
                sum_1_reg_453 <= sum_2_reg_476;
            end if; 
        end if;
    end process;

    sum_2_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_lv1_0 = exitcond3_fu_898_p2))) then 
                sum_2_reg_476 <= sum_1_reg_453;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                sum_2_reg_476 <= grp_fu_510_p2;
            end if; 
        end if;
    end process;

    sum_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = exitcond5_fu_858_p2))) then 
                sum_reg_430 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_lv1_1 = exitcond3_fu_898_p2))) then 
                sum_reg_430 <= sum_1_reg_453;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond11_fu_681_p2 = ap_const_lv1_0) and not(((exitcond11_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_0 = DATA_A_RVALID))))) then
                DATA_A_addr_read_reg_1206 <= DATA_A_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_0 = exitcond7_fu_814_p2) and not(((ap_const_lv1_0 = exitcond7_fu_814_p2) and (ap_const_logic_0 = DATA_B_RVALID))))) then
                DATA_B_addr_read_reg_1274 <= DATA_B_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond6_fu_830_p2) and not(((ap_const_lv1_0 = exitcond6_fu_830_p2) and (ap_const_logic_0 = DATA_C_RVALID))))) then
                DATA_C_addr_read_reg_1292 <= DATA_C_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    DATA_C_addr_reg_1140(29 downto 0) <= tmp_1_fu_545_p1(29 downto 0);
                    tmp_8_reg_1146(29 downto 0) <= tmp_8_fu_565_p1(29 downto 0);
                tmp_reg_1135 <= output_r(31 downto 2);
                    tmp_s_reg_1151(29 downto 0) <= tmp_s_fu_579_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                c5_b_load_reg_1406 <= c5_b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                c5_i_addr_1_reg_1357 <= tmp_33_cast_fu_964_p1(9 - 1 downto 0);
                ci_1_reg_1376 <= ci_1_fu_1015_p2;
                exitcond2_reg_1372 <= exitcond2_fu_1009_p2;
                tmp_37_reg_1362 <= tmp_37_fu_1001_p1;
                tmp_38_reg_1367 <= tmp_38_fu_1005_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and not(((exitcond11_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_0 = DATA_A_RVALID))))) then
                c5_i_addr_reg_1193 <= tmp_19_fu_675_p2(9 - 1 downto 0);
                k_2_reg_1201 <= k_2_fu_687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                c5_i_load_reg_1391 <= c5_i_q0;
                c5_w_load_reg_1386 <= c5_w_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                c5_intermediate_0_0_3_reg_1439 <= c5_intermediate_0_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                c5_o_0_0_load_reg_1464 <= c5_o_0_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and not(((ap_const_lv1_0 = exitcond7_fu_814_p2) and (ap_const_logic_0 = DATA_B_RVALID))))) then
                c5_w_addr_reg_1261 <= tmp_25_fu_808_p2(16 - 1 downto 0);
                l_1_reg_1269 <= l_1_fu_820_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                co_1_reg_1311 <= co_1_fu_864_p2;
                    co_cast6_reg_1297(6 downto 0) <= co_cast6_fu_842_p1(6 downto 0);
                    tmp_23_cast_reg_1303(10 downto 4) <= tmp_23_cast_fu_854_p1(10 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                i_12_reg_1454 <= i_12_fu_1129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and not(((ap_const_lv1_0 = exitcond6_fu_830_p2) and (ap_const_logic_0 = DATA_C_RVALID))))) then
                    i_2_cast7_reg_1279(6 downto 0) <= i_2_cast7_fu_826_p1(6 downto 0);
                i_7_reg_1287 <= i_7_fu_836_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                    i_3_cast5_cast_reg_1321(2 downto 0) <= i_3_cast5_cast_fu_874_p1(2 downto 0);
                    i_3_cast5_reg_1316(2 downto 0) <= i_3_cast5_fu_870_p1(2 downto 0);
                m_reg_1329 <= m_fu_884_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_block_state55_io = ap_const_boolean_0))) then
                    i_4_cast2_reg_1416(6 downto 0) <= i_4_cast2_fu_1043_p1(6 downto 0);
                i_9_reg_1424 <= i_9_fu_1054_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_6_reg_1164 <= i_6_fu_611_p2;
                tmp_10_reg_1156 <= tmp_10_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_block_state13_io = ap_const_boolean_0))) then
                i_8_reg_1219 <= i_8_fu_711_p2;
                    tmp_14_cast_reg_1211(10 downto 4) <= tmp_14_cast_fu_701_p1(10 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                    j_2_cast4_cast1_reg_1339(2 downto 0) <= j_2_cast4_cast1_fu_890_p1(2 downto 0);
                    j_2_cast4_cast_reg_1344(2 downto 0) <= j_2_cast4_cast_fu_894_p1(2 downto 0);
                n_reg_1352 <= n_fu_904_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_3_reg_1177 <= j_3_fu_654_p2;
                tmp_14_reg_1169 <= tmp_14_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j_4_reg_1232 <= j_4_fu_754_p2;
                tmp_18_reg_1224 <= tmp_18_fu_742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                k_3_reg_1245 <= k_3_fu_787_p2;
                tmp_23_reg_1237 <= tmp_23_fu_775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond12_fu_648_p2))) then
                tmp_15_reg_1182 <= tmp_15_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond8_fu_781_p2))) then
                tmp_24_reg_1250 <= tmp_24_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                tmp_2_reg_1411 <= grp_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                tmp_6_reg_1446 <= tmp_6_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                tmp_9_reg_1396 <= grp_fu_516_p2;
            end if;
        end if;
    end process;
    DATA_C_addr_reg_1140(31 downto 30) <= "00";
    tmp_8_reg_1146(31 downto 30) <= "00";
    tmp_s_reg_1151(31 downto 30) <= "00";
    tmp_14_cast_reg_1211(3 downto 0) <= "0000";
    tmp_14_cast_reg_1211(11) <= '0';
    i_2_cast7_reg_1279(31 downto 7) <= "0000000000000000000000000";
    co_cast6_reg_1297(31 downto 7) <= "0000000000000000000000000";
    tmp_23_cast_reg_1303(3 downto 0) <= "0000";
    tmp_23_cast_reg_1303(11) <= '0';
    i_3_cast5_reg_1316(31 downto 3) <= "00000000000000000000000000000";
    i_3_cast5_cast_reg_1321(7 downto 3) <= "00000";
    j_2_cast4_cast1_reg_1339(16 downto 3) <= "00000000000000";
    j_2_cast4_cast_reg_1344(9 downto 3) <= "0000000";
    i_4_cast2_reg_1416(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state11, exitcond11_fu_681_p2, ap_CS_fsm_state16, ap_CS_fsm_state23, exitcond7_fu_814_p2, ap_CS_fsm_state13, exitcond10_fu_705_p2, ap_CS_fsm_state31, exitcond6_fu_830_p2, ap_CS_fsm_state55, exitcond1_fu_1048_p2, ap_CS_fsm_state61, ap_CS_fsm_state65, DATA_A_RVALID, DATA_B_RVALID, DATA_C_RVALID, DATA_D_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond12_fu_648_p2, ap_sig_ioackin_DATA_A_ARREADY, ap_block_state13_io, ap_CS_fsm_state14, ap_CS_fsm_state15, exitcond8_fu_781_p2, ap_sig_ioackin_DATA_B_ARREADY, ap_CS_fsm_state33, ap_CS_fsm_state34, exitcond4_fu_878_p2, ap_CS_fsm_state35, exitcond2_reg_1372, ap_CS_fsm_state37, ap_block_state55_io, ap_CS_fsm_state59, exitcond_fu_1123_p2, exitcond13_fu_605_p2, exitcond9_fu_748_p2, exitcond3_fu_898_p2, exitcond5_fu_858_p2, ap_sig_ioackin_DATA_D_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond13_fu_605_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond12_fu_648_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_DATA_A_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and not(((exitcond11_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_0 = DATA_A_RVALID))) and (exitcond11_fu_681_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond11_fu_681_p2 = ap_const_lv1_0) and not(((exitcond11_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_0 = DATA_A_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_block_state13_io = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond10_fu_705_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond10_fu_705_p2 = ap_const_lv1_1) and (ap_block_state13_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond9_fu_748_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond8_fu_781_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_sig_ioackin_DATA_B_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and not(((ap_const_lv1_0 = exitcond7_fu_814_p2) and (ap_const_logic_0 = DATA_B_RVALID))) and (exitcond7_fu_814_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_0 = exitcond7_fu_814_p2) and not(((ap_const_lv1_0 = exitcond7_fu_814_p2) and (ap_const_logic_0 = DATA_B_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and not(((ap_const_lv1_0 = exitcond6_fu_830_p2) and (ap_const_logic_0 = DATA_C_RVALID))) and (ap_const_lv1_1 = exitcond6_fu_830_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond6_fu_830_p2) and not(((ap_const_lv1_0 = exitcond6_fu_830_p2) and (ap_const_logic_0 = DATA_C_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = exitcond5_fu_858_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_lv1_0 = exitcond4_fu_878_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_lv1_1 = exitcond3_fu_898_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (ap_const_lv1_1 = exitcond2_reg_1372))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_const_lv1_1 = exitcond1_fu_1048_p2) and (ap_block_state55_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_block_state55_io = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond1_fu_1048_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_const_lv1_1 = exitcond_fu_1123_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (ap_sig_ioackin_DATA_D_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (DATA_D_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    DATA_A_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_DATA_A_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_0 = ap_reg_ioackin_DATA_A_ARREADY))) then 
            DATA_A_ARVALID <= ap_const_logic_1;
        else 
            DATA_A_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_A_RREADY_assign_proc : process(ap_CS_fsm_state11, exitcond11_fu_681_p2, DATA_A_RVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond11_fu_681_p2 = ap_const_lv1_0) and not(((exitcond11_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_0 = DATA_A_RVALID))))) then 
            DATA_A_RREADY <= ap_const_logic_1;
        else 
            DATA_A_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_A_blk_n_AR_assign_proc : process(m_axi_DATA_A_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            DATA_A_blk_n_AR <= m_axi_DATA_A_ARREADY;
        else 
            DATA_A_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_A_blk_n_R_assign_proc : process(m_axi_DATA_A_RVALID, ap_CS_fsm_state11, exitcond11_fu_681_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond11_fu_681_p2 = ap_const_lv1_0))) then 
            DATA_A_blk_n_R <= m_axi_DATA_A_RVALID;
        else 
            DATA_A_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    DATA_B_ARVALID_assign_proc : process(ap_CS_fsm_state16, ap_reg_ioackin_DATA_B_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_0 = ap_reg_ioackin_DATA_B_ARREADY))) then 
            DATA_B_ARVALID <= ap_const_logic_1;
        else 
            DATA_B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_B_RREADY_assign_proc : process(ap_CS_fsm_state23, exitcond7_fu_814_p2, DATA_B_RVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_0 = exitcond7_fu_814_p2) and not(((ap_const_lv1_0 = exitcond7_fu_814_p2) and (ap_const_logic_0 = DATA_B_RVALID))))) then 
            DATA_B_RREADY <= ap_const_logic_1;
        else 
            DATA_B_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_B_blk_n_AR_assign_proc : process(m_axi_DATA_B_ARREADY, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            DATA_B_blk_n_AR <= m_axi_DATA_B_ARREADY;
        else 
            DATA_B_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_B_blk_n_R_assign_proc : process(m_axi_DATA_B_RVALID, ap_CS_fsm_state23, exitcond7_fu_814_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_0 = exitcond7_fu_814_p2))) then 
            DATA_B_blk_n_R <= m_axi_DATA_B_RVALID;
        else 
            DATA_B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    DATA_C_ARVALID_assign_proc : process(ap_CS_fsm_state13, exitcond10_fu_705_p2, ap_reg_ioackin_DATA_C_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond10_fu_705_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_reg_ioackin_DATA_C_ARREADY))) then 
            DATA_C_ARVALID <= ap_const_logic_1;
        else 
            DATA_C_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C_RREADY_assign_proc : process(ap_CS_fsm_state31, exitcond6_fu_830_p2, DATA_C_RVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond6_fu_830_p2) and not(((ap_const_lv1_0 = exitcond6_fu_830_p2) and (ap_const_logic_0 = DATA_C_RVALID))))) then 
            DATA_C_RREADY <= ap_const_logic_1;
        else 
            DATA_C_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_C_blk_n_AR_assign_proc : process(m_axi_DATA_C_ARREADY, ap_CS_fsm_state13, exitcond10_fu_705_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond10_fu_705_p2 = ap_const_lv1_1))) then 
            DATA_C_blk_n_AR <= m_axi_DATA_C_ARREADY;
        else 
            DATA_C_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_C_blk_n_R_assign_proc : process(m_axi_DATA_C_RVALID, ap_CS_fsm_state31, exitcond6_fu_830_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond6_fu_830_p2))) then 
            DATA_C_blk_n_R <= m_axi_DATA_C_RVALID;
        else 
            DATA_C_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    DATA_D_AWVALID_assign_proc : process(ap_CS_fsm_state55, exitcond1_fu_1048_p2, ap_reg_ioackin_DATA_D_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_const_lv1_1 = exitcond1_fu_1048_p2) and (ap_const_logic_0 = ap_reg_ioackin_DATA_D_AWREADY))) then 
            DATA_D_AWVALID <= ap_const_logic_1;
        else 
            DATA_D_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_D_BREADY_assign_proc : process(ap_CS_fsm_state65, DATA_D_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) and (DATA_D_BVALID = ap_const_logic_1))) then 
            DATA_D_BREADY <= ap_const_logic_1;
        else 
            DATA_D_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_D_WVALID_assign_proc : process(ap_CS_fsm_state61, ap_reg_ioackin_DATA_D_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) and (ap_const_logic_0 = ap_reg_ioackin_DATA_D_WREADY))) then 
            DATA_D_WVALID <= ap_const_logic_1;
        else 
            DATA_D_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_D_blk_n_AW_assign_proc : process(m_axi_DATA_D_AWREADY, ap_CS_fsm_state55, exitcond1_fu_1048_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_const_lv1_1 = exitcond1_fu_1048_p2))) then 
            DATA_D_blk_n_AW <= m_axi_DATA_D_AWREADY;
        else 
            DATA_D_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    DATA_D_blk_n_B_assign_proc : process(m_axi_DATA_D_BVALID, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            DATA_D_blk_n_B <= m_axi_DATA_D_BVALID;
        else 
            DATA_D_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    DATA_D_blk_n_W_assign_proc : process(m_axi_DATA_D_WREADY, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            DATA_D_blk_n_W <= m_axi_DATA_D_WREADY;
        else 
            DATA_D_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);

    ap_block_state11_assign_proc : process(exitcond11_fu_681_p2, DATA_A_RVALID)
    begin
                ap_block_state11 <= ((exitcond11_fu_681_p2 = ap_const_lv1_0) and (ap_const_logic_0 = DATA_A_RVALID));
    end process;


    ap_block_state13_io_assign_proc : process(exitcond10_fu_705_p2, ap_sig_ioackin_DATA_C_ARREADY)
    begin
                ap_block_state13_io <= ((exitcond10_fu_705_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_DATA_C_ARREADY));
    end process;


    ap_block_state23_assign_proc : process(exitcond7_fu_814_p2, DATA_B_RVALID)
    begin
                ap_block_state23 <= ((ap_const_lv1_0 = exitcond7_fu_814_p2) and (ap_const_logic_0 = DATA_B_RVALID));
    end process;


    ap_block_state31_assign_proc : process(exitcond6_fu_830_p2, DATA_C_RVALID)
    begin
                ap_block_state31 <= ((ap_const_lv1_0 = exitcond6_fu_830_p2) and (ap_const_logic_0 = DATA_C_RVALID));
    end process;


    ap_block_state55_io_assign_proc : process(exitcond1_fu_1048_p2, ap_sig_ioackin_DATA_D_AWREADY)
    begin
                ap_block_state55_io <= ((ap_const_lv1_1 = exitcond1_fu_1048_p2) and (ap_const_logic_0 = ap_sig_ioackin_DATA_D_AWREADY));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state65, DATA_D_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) and (DATA_D_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state65, DATA_D_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) and (DATA_D_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_DATA_A_ARREADY_assign_proc : process(DATA_A_ARREADY, ap_reg_ioackin_DATA_A_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_DATA_A_ARREADY)) then 
            ap_sig_ioackin_DATA_A_ARREADY <= DATA_A_ARREADY;
        else 
            ap_sig_ioackin_DATA_A_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_DATA_B_ARREADY_assign_proc : process(DATA_B_ARREADY, ap_reg_ioackin_DATA_B_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_DATA_B_ARREADY)) then 
            ap_sig_ioackin_DATA_B_ARREADY <= DATA_B_ARREADY;
        else 
            ap_sig_ioackin_DATA_B_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_DATA_C_ARREADY_assign_proc : process(DATA_C_ARREADY, ap_reg_ioackin_DATA_C_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_DATA_C_ARREADY)) then 
            ap_sig_ioackin_DATA_C_ARREADY <= DATA_C_ARREADY;
        else 
            ap_sig_ioackin_DATA_C_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_DATA_D_AWREADY_assign_proc : process(DATA_D_AWREADY, ap_reg_ioackin_DATA_D_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_DATA_D_AWREADY)) then 
            ap_sig_ioackin_DATA_D_AWREADY <= DATA_D_AWREADY;
        else 
            ap_sig_ioackin_DATA_D_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_DATA_D_WREADY_assign_proc : process(DATA_D_WREADY, ap_reg_ioackin_DATA_D_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_DATA_D_WREADY)) then 
            ap_sig_ioackin_DATA_D_WREADY <= DATA_D_WREADY;
        else 
            ap_sig_ioackin_DATA_D_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias5_fu_535_p4 <= bias(31 downto 2);

    c5_b_address0_assign_proc : process(i_2_cast7_reg_1279, co_cast6_reg_1297, ap_CS_fsm_state34, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            c5_b_address0 <= co_cast6_reg_1297(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            c5_b_address0 <= i_2_cast7_reg_1279(7 - 1 downto 0);
        else 
            c5_b_address0 <= "XXXXXXX";
        end if; 
    end process;


    c5_b_ce0_assign_proc : process(ap_CS_fsm_state34, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            c5_b_ce0 <= ap_const_logic_1;
        else 
            c5_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_b_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            c5_b_we0 <= ap_const_logic_1;
        else 
            c5_b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_i_address0_assign_proc : process(c5_i_addr_reg_1193, c5_i_addr_1_reg_1357, ap_CS_fsm_state37, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            c5_i_address0 <= c5_i_addr_1_reg_1357;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c5_i_address0 <= c5_i_addr_reg_1193;
        else 
            c5_i_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    c5_i_ce0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            c5_i_ce0 <= ap_const_logic_1;
        else 
            c5_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_i_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c5_i_we0 <= ap_const_logic_1;
        else 
            c5_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_intermediate_0_0_address0_assign_proc : process(ap_CS_fsm_state55, co_cast6_reg_1297, i_4_cast2_fu_1043_p1, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            c5_intermediate_0_0_address0 <= i_4_cast2_fu_1043_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            c5_intermediate_0_0_address0 <= co_cast6_reg_1297(7 - 1 downto 0);
        else 
            c5_intermediate_0_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    c5_intermediate_0_0_ce0_assign_proc : process(ap_CS_fsm_state55, ap_block_state55_io, ap_CS_fsm_state54)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_block_state55_io = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            c5_intermediate_0_0_ce0 <= ap_const_logic_1;
        else 
            c5_intermediate_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_intermediate_0_0_we0_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            c5_intermediate_0_0_we0 <= ap_const_logic_1;
        else 
            c5_intermediate_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_o_0_0_address0_assign_proc : process(i_4_cast2_reg_1416, ap_CS_fsm_state59, ap_CS_fsm_state58, i_5_cast1_fu_1118_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            c5_o_0_0_address0 <= i_5_cast1_fu_1118_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            c5_o_0_0_address0 <= i_4_cast2_reg_1416(7 - 1 downto 0);
        else 
            c5_o_0_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    c5_o_0_0_ce0_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            c5_o_0_0_ce0 <= ap_const_logic_1;
        else 
            c5_o_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c5_o_0_0_d0 <= 
        c5_intermediate_0_0_3_reg_1439 when (tmp_7_fu_1105_p2(0) = '1') else 
        ap_const_lv32_0;

    c5_o_0_0_we0_assign_proc : process(ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            c5_o_0_0_we0 <= ap_const_logic_1;
        else 
            c5_o_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_w_address0_assign_proc : process(c5_w_addr_reg_1261, ap_CS_fsm_state37, ap_CS_fsm_state24, tmp_40_cast_fu_1038_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            c5_w_address0 <= tmp_40_cast_fu_1038_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            c5_w_address0 <= c5_w_addr_reg_1261;
        else 
            c5_w_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c5_w_ce0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            c5_w_ce0 <= ap_const_logic_1;
        else 
            c5_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c5_w_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            c5_w_we0 <= ap_const_logic_1;
        else 
            c5_w_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_1_fu_1015_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ci_reg_465));
    ci_cast3_cast1_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_465),12));
    ci_cast3_cast_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_465),8));
    co_1_fu_864_p2 <= std_logic_vector(unsigned(co_reg_408) + unsigned(ap_const_lv7_1));
    co_cast6_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_408),32));
    exitcond10_fu_705_p2 <= "1" when (i_1_reg_353 = ap_const_lv7_78) else "0";
    exitcond11_fu_681_p2 <= "1" when (k_reg_342 = ap_const_lv3_5) else "0";
    exitcond12_fu_648_p2 <= "1" when (j_reg_331 = ap_const_lv3_5) else "0";
    exitcond13_fu_605_p2 <= "1" when (i_reg_320 = ap_const_lv5_10) else "0";
    exitcond1_fu_1048_p2 <= "1" when (i_4_reg_488 = ap_const_lv7_78) else "0";
    exitcond2_fu_1009_p2 <= "1" when (ci_reg_465 = ap_const_lv5_10) else "0";
    exitcond3_fu_898_p2 <= "1" when (j_2_reg_442 = ap_const_lv3_5) else "0";
    exitcond4_fu_878_p2 <= "1" when (i_3_reg_419 = ap_const_lv3_5) else "0";
    exitcond5_fu_858_p2 <= "1" when (co_reg_408 = ap_const_lv7_78) else "0";
    exitcond6_fu_830_p2 <= "1" when (i_2_reg_397 = ap_const_lv7_78) else "0";
    exitcond7_fu_814_p2 <= "1" when (l_reg_386 = ap_const_lv3_5) else "0";
    exitcond8_fu_781_p2 <= "1" when (k_1_reg_375 = ap_const_lv3_5) else "0";
    exitcond9_fu_748_p2 <= "1" when (j_1_reg_364 = ap_const_lv5_10) else "0";
    exitcond_fu_1123_p2 <= "1" when (i_5_reg_499 = ap_const_lv7_78) else "0";

    grp_fu_510_p0_assign_proc : process(sum_reg_430, sum_2_reg_476, ap_CS_fsm_state43, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_510_p0 <= sum_reg_430;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_510_p0 <= sum_2_reg_476;
        else 
            grp_fu_510_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_510_p1_assign_proc : process(tmp_9_reg_1396, c5_b_load_reg_1406, ap_CS_fsm_state43, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_510_p1 <= c5_b_load_reg_1406;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_510_p1 <= tmp_9_reg_1396;
        else 
            grp_fu_510_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_12_fu_1129_p2 <= std_logic_vector(unsigned(i_5_reg_499) + unsigned(ap_const_lv7_1));
    i_2_cast7_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_397),32));
    i_3_cast5_cast_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_419),8));
    i_3_cast5_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_419),32));
    i_4_cast2_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_488),32));
    i_5_cast1_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_499),32));
    i_6_fu_611_p2 <= std_logic_vector(unsigned(i_reg_320) + unsigned(ap_const_lv5_1));
    i_7_fu_836_p2 <= std_logic_vector(unsigned(i_2_reg_397) + unsigned(ap_const_lv7_1));
    i_8_fu_711_p2 <= std_logic_vector(unsigned(i_1_reg_353) + unsigned(ap_const_lv7_1));
    i_9_fu_1054_p2 <= std_logic_vector(unsigned(i_4_reg_488) + unsigned(ap_const_lv7_1));
    i_cast_cast_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_320),8));
    input1_fu_569_p4 <= input_r(31 downto 2);
    input_assign_to_int_fu_1070_p1 <= c5_intermediate_0_0_3_reg_1439;
    j_1_cast_cast_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_364),12));
    j_2_cast4_cast1_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_442),17));
    j_2_cast4_cast_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_442),10));
    j_3_fu_654_p2 <= std_logic_vector(unsigned(j_reg_331) + unsigned(ap_const_lv3_1));
    j_4_fu_754_p2 <= std_logic_vector(unsigned(j_1_reg_364) + unsigned(ap_const_lv5_1));
    j_cast_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_331),8));
    k_1_cast9_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_375),32));
    k_2_fu_687_p2 <= std_logic_vector(unsigned(k_reg_342) + unsigned(ap_const_lv3_1));
    k_3_fu_787_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(k_1_reg_375));
    k_cast_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_342),32));
    l_1_fu_820_p2 <= std_logic_vector(unsigned(l_reg_386) + unsigned(ap_const_lv3_1));
    l_cast8_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_386),32));
    m_fu_884_p2 <= std_logic_vector(unsigned(i_3_reg_419) + unsigned(ap_const_lv3_1));
    n_fu_904_p2 <= std_logic_vector(unsigned(j_2_reg_442) + unsigned(ap_const_lv3_1));
    notlhs_fu_1087_p2 <= "0" when (tmp_3_fu_1073_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_1093_p2 <= "1" when (tmp_27_fu_1083_p1 = ap_const_lv23_0) else "0";
    p_shl1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_730_p3),32));
    p_shl3_cast_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_918_p3),8));
    p_shl4_cast_fu_945_p3 <= (tmp_30_fu_936_p2 & ap_const_lv2_0);
    p_shl5_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_978_p3),32));
    p_shl6_cast_fu_1021_p3 <= (tmp_38_reg_1367 & ap_const_lv2_0);
    p_shl9_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_630_p3),32));
    p_shl_cast_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_587_p3),8));
    tmp_10_fu_599_p2 <= std_logic_vector(unsigned(i_cast_cast_fu_583_p1) + unsigned(p_shl_cast_fu_595_p1));
    tmp_11_fu_693_p3 <= (i_1_reg_353 & ap_const_lv4_0);
    tmp_12_fu_621_p2 <= std_logic_vector(unsigned(tmp_10_reg_1156) + unsigned(j_cast_cast_fu_617_p1));
    tmp_13_fu_630_p3 <= (tmp_12_fu_621_p2 & ap_const_lv2_0);
    tmp_14_cast_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_693_p3),12));
    tmp_14_fu_642_p2 <= std_logic_vector(unsigned(tmp_15_cast_fu_626_p1) + unsigned(p_shl9_fu_638_p1));
    tmp_15_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_621_p2),32));
    tmp_15_fu_660_p2 <= std_logic_vector(unsigned(tmp_s_reg_1151) + unsigned(tmp_14_fu_642_p2));
    tmp_16_fu_721_p2 <= std_logic_vector(unsigned(tmp_14_cast_reg_1211) + unsigned(j_1_cast_cast_fu_717_p1));
    tmp_17_fu_730_p3 <= (tmp_16_fu_721_p2 & ap_const_lv2_0);
    tmp_18_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_721_p2),32));
    tmp_18_fu_742_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_726_p1) + unsigned(p_shl1_fu_738_p1));
    tmp_19_fu_675_p2 <= std_logic_vector(unsigned(k_cast_fu_671_p1) + unsigned(tmp_14_reg_1169));
    tmp_1_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bias5_fu_535_p4),32));
    tmp_20_fu_846_p3 <= (co_reg_408 & ap_const_lv4_0);
    tmp_21_fu_764_p2 <= std_logic_vector(unsigned(tmp_18_reg_1224) + unsigned(k_1_cast9_fu_760_p1));
    tmp_22_fu_769_p2 <= std_logic_vector(shift_left(unsigned(tmp_21_fu_764_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_23_cast_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_846_p3),12));
    tmp_23_fu_775_p2 <= std_logic_vector(unsigned(tmp_21_fu_764_p2) + unsigned(tmp_22_fu_769_p2));
    tmp_24_fu_793_p2 <= std_logic_vector(unsigned(tmp_8_reg_1146) + unsigned(tmp_23_fu_775_p2));
    tmp_25_fu_808_p2 <= std_logic_vector(unsigned(l_cast8_fu_804_p1) + unsigned(tmp_23_reg_1237));
    tmp_26_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1135),32));
    tmp_27_fu_1083_p1 <= input_assign_to_int_fu_1070_p1(23 - 1 downto 0);
    tmp_28_fu_918_p3 <= (ci_reg_465 & ap_const_lv2_0);
    tmp_29_fu_930_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_926_p1) + unsigned(ci_cast3_cast_fu_914_p1));
    tmp_30_cast_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_936_p2),10));
    tmp_30_fu_936_p2 <= std_logic_vector(unsigned(i_3_cast5_cast_reg_1321) + unsigned(tmp_29_fu_930_p2));
    tmp_31_fu_953_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_945_p3) + unsigned(tmp_30_cast_fu_941_p1));
    tmp_32_fu_959_p2 <= std_logic_vector(unsigned(j_2_cast4_cast_reg_1344) + unsigned(tmp_31_fu_953_p2));
    tmp_33_cast_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_959_p2),32));
    tmp_33_fu_969_p2 <= std_logic_vector(unsigned(ci_cast3_cast1_fu_910_p1) + unsigned(tmp_23_cast_reg_1303));
    tmp_34_cast_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_969_p2),32));
    tmp_34_fu_978_p3 <= (tmp_33_fu_969_p2 & ap_const_lv2_0);
    tmp_35_fu_990_p2 <= std_logic_vector(unsigned(p_shl5_fu_986_p1) + unsigned(tmp_34_cast_fu_974_p1));
    tmp_36_fu_996_p2 <= std_logic_vector(unsigned(i_3_cast5_reg_1316) + unsigned(tmp_35_fu_990_p2));
    tmp_37_fu_1001_p1 <= tmp_36_fu_996_p2(17 - 1 downto 0);
    tmp_38_fu_1005_p1 <= tmp_36_fu_996_p2(15 - 1 downto 0);
    tmp_39_fu_1028_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_1021_p3) + unsigned(tmp_37_reg_1362));
    tmp_3_fu_1073_p4 <= input_assign_to_int_fu_1070_p1(30 downto 23);
    tmp_40_cast_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_1033_p2),32));
    tmp_40_fu_1033_p2 <= std_logic_vector(unsigned(j_2_cast4_cast1_reg_1339) + unsigned(tmp_39_fu_1028_p2));
    tmp_4_fu_587_p3 <= (i_reg_320 & ap_const_lv2_0);
    tmp_5_fu_1099_p2 <= (notrhs_fu_1093_p2 or notlhs_fu_1087_p2);
    tmp_7_fu_1105_p2 <= (tmp_5_fu_1099_p2 and tmp_6_reg_1446);
    tmp_8_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights3_fu_555_p4),32));
    tmp_s_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_fu_569_p4),32));
    weights3_fu_555_p4 <= weights(31 downto 2);
end behav;
