// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolution5,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=776408,HLS_SYN_TPT=none,HLS_SYN_MEM=140,HLS_SYN_DSP=5,HLS_SYN_FF=4929,HLS_SYN_LUT=5037}" *)

module convolution5 (
        ap_clk,
        ap_rst_n,
        m_axi_DATA_A_AWVALID,
        m_axi_DATA_A_AWREADY,
        m_axi_DATA_A_AWADDR,
        m_axi_DATA_A_AWID,
        m_axi_DATA_A_AWLEN,
        m_axi_DATA_A_AWSIZE,
        m_axi_DATA_A_AWBURST,
        m_axi_DATA_A_AWLOCK,
        m_axi_DATA_A_AWCACHE,
        m_axi_DATA_A_AWPROT,
        m_axi_DATA_A_AWQOS,
        m_axi_DATA_A_AWREGION,
        m_axi_DATA_A_AWUSER,
        m_axi_DATA_A_WVALID,
        m_axi_DATA_A_WREADY,
        m_axi_DATA_A_WDATA,
        m_axi_DATA_A_WSTRB,
        m_axi_DATA_A_WLAST,
        m_axi_DATA_A_WID,
        m_axi_DATA_A_WUSER,
        m_axi_DATA_A_ARVALID,
        m_axi_DATA_A_ARREADY,
        m_axi_DATA_A_ARADDR,
        m_axi_DATA_A_ARID,
        m_axi_DATA_A_ARLEN,
        m_axi_DATA_A_ARSIZE,
        m_axi_DATA_A_ARBURST,
        m_axi_DATA_A_ARLOCK,
        m_axi_DATA_A_ARCACHE,
        m_axi_DATA_A_ARPROT,
        m_axi_DATA_A_ARQOS,
        m_axi_DATA_A_ARREGION,
        m_axi_DATA_A_ARUSER,
        m_axi_DATA_A_RVALID,
        m_axi_DATA_A_RREADY,
        m_axi_DATA_A_RDATA,
        m_axi_DATA_A_RLAST,
        m_axi_DATA_A_RID,
        m_axi_DATA_A_RUSER,
        m_axi_DATA_A_RRESP,
        m_axi_DATA_A_BVALID,
        m_axi_DATA_A_BREADY,
        m_axi_DATA_A_BRESP,
        m_axi_DATA_A_BID,
        m_axi_DATA_A_BUSER,
        m_axi_DATA_B_AWVALID,
        m_axi_DATA_B_AWREADY,
        m_axi_DATA_B_AWADDR,
        m_axi_DATA_B_AWID,
        m_axi_DATA_B_AWLEN,
        m_axi_DATA_B_AWSIZE,
        m_axi_DATA_B_AWBURST,
        m_axi_DATA_B_AWLOCK,
        m_axi_DATA_B_AWCACHE,
        m_axi_DATA_B_AWPROT,
        m_axi_DATA_B_AWQOS,
        m_axi_DATA_B_AWREGION,
        m_axi_DATA_B_AWUSER,
        m_axi_DATA_B_WVALID,
        m_axi_DATA_B_WREADY,
        m_axi_DATA_B_WDATA,
        m_axi_DATA_B_WSTRB,
        m_axi_DATA_B_WLAST,
        m_axi_DATA_B_WID,
        m_axi_DATA_B_WUSER,
        m_axi_DATA_B_ARVALID,
        m_axi_DATA_B_ARREADY,
        m_axi_DATA_B_ARADDR,
        m_axi_DATA_B_ARID,
        m_axi_DATA_B_ARLEN,
        m_axi_DATA_B_ARSIZE,
        m_axi_DATA_B_ARBURST,
        m_axi_DATA_B_ARLOCK,
        m_axi_DATA_B_ARCACHE,
        m_axi_DATA_B_ARPROT,
        m_axi_DATA_B_ARQOS,
        m_axi_DATA_B_ARREGION,
        m_axi_DATA_B_ARUSER,
        m_axi_DATA_B_RVALID,
        m_axi_DATA_B_RREADY,
        m_axi_DATA_B_RDATA,
        m_axi_DATA_B_RLAST,
        m_axi_DATA_B_RID,
        m_axi_DATA_B_RUSER,
        m_axi_DATA_B_RRESP,
        m_axi_DATA_B_BVALID,
        m_axi_DATA_B_BREADY,
        m_axi_DATA_B_BRESP,
        m_axi_DATA_B_BID,
        m_axi_DATA_B_BUSER,
        m_axi_DATA_C_AWVALID,
        m_axi_DATA_C_AWREADY,
        m_axi_DATA_C_AWADDR,
        m_axi_DATA_C_AWID,
        m_axi_DATA_C_AWLEN,
        m_axi_DATA_C_AWSIZE,
        m_axi_DATA_C_AWBURST,
        m_axi_DATA_C_AWLOCK,
        m_axi_DATA_C_AWCACHE,
        m_axi_DATA_C_AWPROT,
        m_axi_DATA_C_AWQOS,
        m_axi_DATA_C_AWREGION,
        m_axi_DATA_C_AWUSER,
        m_axi_DATA_C_WVALID,
        m_axi_DATA_C_WREADY,
        m_axi_DATA_C_WDATA,
        m_axi_DATA_C_WSTRB,
        m_axi_DATA_C_WLAST,
        m_axi_DATA_C_WID,
        m_axi_DATA_C_WUSER,
        m_axi_DATA_C_ARVALID,
        m_axi_DATA_C_ARREADY,
        m_axi_DATA_C_ARADDR,
        m_axi_DATA_C_ARID,
        m_axi_DATA_C_ARLEN,
        m_axi_DATA_C_ARSIZE,
        m_axi_DATA_C_ARBURST,
        m_axi_DATA_C_ARLOCK,
        m_axi_DATA_C_ARCACHE,
        m_axi_DATA_C_ARPROT,
        m_axi_DATA_C_ARQOS,
        m_axi_DATA_C_ARREGION,
        m_axi_DATA_C_ARUSER,
        m_axi_DATA_C_RVALID,
        m_axi_DATA_C_RREADY,
        m_axi_DATA_C_RDATA,
        m_axi_DATA_C_RLAST,
        m_axi_DATA_C_RID,
        m_axi_DATA_C_RUSER,
        m_axi_DATA_C_RRESP,
        m_axi_DATA_C_BVALID,
        m_axi_DATA_C_BREADY,
        m_axi_DATA_C_BRESP,
        m_axi_DATA_C_BID,
        m_axi_DATA_C_BUSER,
        m_axi_DATA_D_AWVALID,
        m_axi_DATA_D_AWREADY,
        m_axi_DATA_D_AWADDR,
        m_axi_DATA_D_AWID,
        m_axi_DATA_D_AWLEN,
        m_axi_DATA_D_AWSIZE,
        m_axi_DATA_D_AWBURST,
        m_axi_DATA_D_AWLOCK,
        m_axi_DATA_D_AWCACHE,
        m_axi_DATA_D_AWPROT,
        m_axi_DATA_D_AWQOS,
        m_axi_DATA_D_AWREGION,
        m_axi_DATA_D_AWUSER,
        m_axi_DATA_D_WVALID,
        m_axi_DATA_D_WREADY,
        m_axi_DATA_D_WDATA,
        m_axi_DATA_D_WSTRB,
        m_axi_DATA_D_WLAST,
        m_axi_DATA_D_WID,
        m_axi_DATA_D_WUSER,
        m_axi_DATA_D_ARVALID,
        m_axi_DATA_D_ARREADY,
        m_axi_DATA_D_ARADDR,
        m_axi_DATA_D_ARID,
        m_axi_DATA_D_ARLEN,
        m_axi_DATA_D_ARSIZE,
        m_axi_DATA_D_ARBURST,
        m_axi_DATA_D_ARLOCK,
        m_axi_DATA_D_ARCACHE,
        m_axi_DATA_D_ARPROT,
        m_axi_DATA_D_ARQOS,
        m_axi_DATA_D_ARREGION,
        m_axi_DATA_D_ARUSER,
        m_axi_DATA_D_RVALID,
        m_axi_DATA_D_RREADY,
        m_axi_DATA_D_RDATA,
        m_axi_DATA_D_RLAST,
        m_axi_DATA_D_RID,
        m_axi_DATA_D_RUSER,
        m_axi_DATA_D_RRESP,
        m_axi_DATA_D_BVALID,
        m_axi_DATA_D_BREADY,
        m_axi_DATA_D_BRESP,
        m_axi_DATA_D_BID,
        m_axi_DATA_D_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 65'd1;
parameter    ap_ST_fsm_state2 = 65'd2;
parameter    ap_ST_fsm_state3 = 65'd4;
parameter    ap_ST_fsm_state4 = 65'd8;
parameter    ap_ST_fsm_state5 = 65'd16;
parameter    ap_ST_fsm_state6 = 65'd32;
parameter    ap_ST_fsm_state7 = 65'd64;
parameter    ap_ST_fsm_state8 = 65'd128;
parameter    ap_ST_fsm_state9 = 65'd256;
parameter    ap_ST_fsm_state10 = 65'd512;
parameter    ap_ST_fsm_state11 = 65'd1024;
parameter    ap_ST_fsm_state12 = 65'd2048;
parameter    ap_ST_fsm_state13 = 65'd4096;
parameter    ap_ST_fsm_state14 = 65'd8192;
parameter    ap_ST_fsm_state15 = 65'd16384;
parameter    ap_ST_fsm_state16 = 65'd32768;
parameter    ap_ST_fsm_state17 = 65'd65536;
parameter    ap_ST_fsm_state18 = 65'd131072;
parameter    ap_ST_fsm_state19 = 65'd262144;
parameter    ap_ST_fsm_state20 = 65'd524288;
parameter    ap_ST_fsm_state21 = 65'd1048576;
parameter    ap_ST_fsm_state22 = 65'd2097152;
parameter    ap_ST_fsm_state23 = 65'd4194304;
parameter    ap_ST_fsm_state24 = 65'd8388608;
parameter    ap_ST_fsm_state25 = 65'd16777216;
parameter    ap_ST_fsm_state26 = 65'd33554432;
parameter    ap_ST_fsm_state27 = 65'd67108864;
parameter    ap_ST_fsm_state28 = 65'd134217728;
parameter    ap_ST_fsm_state29 = 65'd268435456;
parameter    ap_ST_fsm_state30 = 65'd536870912;
parameter    ap_ST_fsm_state31 = 65'd1073741824;
parameter    ap_ST_fsm_state32 = 65'd2147483648;
parameter    ap_ST_fsm_state33 = 65'd4294967296;
parameter    ap_ST_fsm_state34 = 65'd8589934592;
parameter    ap_ST_fsm_state35 = 65'd17179869184;
parameter    ap_ST_fsm_state36 = 65'd34359738368;
parameter    ap_ST_fsm_state37 = 65'd68719476736;
parameter    ap_ST_fsm_state38 = 65'd137438953472;
parameter    ap_ST_fsm_state39 = 65'd274877906944;
parameter    ap_ST_fsm_state40 = 65'd549755813888;
parameter    ap_ST_fsm_state41 = 65'd1099511627776;
parameter    ap_ST_fsm_state42 = 65'd2199023255552;
parameter    ap_ST_fsm_state43 = 65'd4398046511104;
parameter    ap_ST_fsm_state44 = 65'd8796093022208;
parameter    ap_ST_fsm_state45 = 65'd17592186044416;
parameter    ap_ST_fsm_state46 = 65'd35184372088832;
parameter    ap_ST_fsm_state47 = 65'd70368744177664;
parameter    ap_ST_fsm_state48 = 65'd140737488355328;
parameter    ap_ST_fsm_state49 = 65'd281474976710656;
parameter    ap_ST_fsm_state50 = 65'd562949953421312;
parameter    ap_ST_fsm_state51 = 65'd1125899906842624;
parameter    ap_ST_fsm_state52 = 65'd2251799813685248;
parameter    ap_ST_fsm_state53 = 65'd4503599627370496;
parameter    ap_ST_fsm_state54 = 65'd9007199254740992;
parameter    ap_ST_fsm_state55 = 65'd18014398509481984;
parameter    ap_ST_fsm_state56 = 65'd36028797018963968;
parameter    ap_ST_fsm_state57 = 65'd72057594037927936;
parameter    ap_ST_fsm_state58 = 65'd144115188075855872;
parameter    ap_ST_fsm_state59 = 65'd288230376151711744;
parameter    ap_ST_fsm_state60 = 65'd576460752303423488;
parameter    ap_ST_fsm_state61 = 65'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 65'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 65'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 65'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 65'd18446744073709551616;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_A_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_A_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_A_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_A_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_USER_VALUE = 0;
parameter    C_M_AXI_DATA_A_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_A_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_B_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_B_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_B_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_B_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_USER_VALUE = 0;
parameter    C_M_AXI_DATA_B_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_B_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_C_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_C_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_C_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_C_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_USER_VALUE = 0;
parameter    C_M_AXI_DATA_C_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_C_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_D_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_D_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_D_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_D_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_D_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_D_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_D_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_D_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_D_USER_VALUE = 0;
parameter    C_M_AXI_DATA_D_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_D_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_A_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_B_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_C_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_D_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_DATA_A_AWVALID;
input   m_axi_DATA_A_AWREADY;
output  [C_M_AXI_DATA_A_ADDR_WIDTH - 1:0] m_axi_DATA_A_AWADDR;
output  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_AWID;
output  [7:0] m_axi_DATA_A_AWLEN;
output  [2:0] m_axi_DATA_A_AWSIZE;
output  [1:0] m_axi_DATA_A_AWBURST;
output  [1:0] m_axi_DATA_A_AWLOCK;
output  [3:0] m_axi_DATA_A_AWCACHE;
output  [2:0] m_axi_DATA_A_AWPROT;
output  [3:0] m_axi_DATA_A_AWQOS;
output  [3:0] m_axi_DATA_A_AWREGION;
output  [C_M_AXI_DATA_A_AWUSER_WIDTH - 1:0] m_axi_DATA_A_AWUSER;
output   m_axi_DATA_A_WVALID;
input   m_axi_DATA_A_WREADY;
output  [C_M_AXI_DATA_A_DATA_WIDTH - 1:0] m_axi_DATA_A_WDATA;
output  [C_M_AXI_DATA_A_WSTRB_WIDTH - 1:0] m_axi_DATA_A_WSTRB;
output   m_axi_DATA_A_WLAST;
output  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_WID;
output  [C_M_AXI_DATA_A_WUSER_WIDTH - 1:0] m_axi_DATA_A_WUSER;
output   m_axi_DATA_A_ARVALID;
input   m_axi_DATA_A_ARREADY;
output  [C_M_AXI_DATA_A_ADDR_WIDTH - 1:0] m_axi_DATA_A_ARADDR;
output  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_ARID;
output  [7:0] m_axi_DATA_A_ARLEN;
output  [2:0] m_axi_DATA_A_ARSIZE;
output  [1:0] m_axi_DATA_A_ARBURST;
output  [1:0] m_axi_DATA_A_ARLOCK;
output  [3:0] m_axi_DATA_A_ARCACHE;
output  [2:0] m_axi_DATA_A_ARPROT;
output  [3:0] m_axi_DATA_A_ARQOS;
output  [3:0] m_axi_DATA_A_ARREGION;
output  [C_M_AXI_DATA_A_ARUSER_WIDTH - 1:0] m_axi_DATA_A_ARUSER;
input   m_axi_DATA_A_RVALID;
output   m_axi_DATA_A_RREADY;
input  [C_M_AXI_DATA_A_DATA_WIDTH - 1:0] m_axi_DATA_A_RDATA;
input   m_axi_DATA_A_RLAST;
input  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_RID;
input  [C_M_AXI_DATA_A_RUSER_WIDTH - 1:0] m_axi_DATA_A_RUSER;
input  [1:0] m_axi_DATA_A_RRESP;
input   m_axi_DATA_A_BVALID;
output   m_axi_DATA_A_BREADY;
input  [1:0] m_axi_DATA_A_BRESP;
input  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_BID;
input  [C_M_AXI_DATA_A_BUSER_WIDTH - 1:0] m_axi_DATA_A_BUSER;
output   m_axi_DATA_B_AWVALID;
input   m_axi_DATA_B_AWREADY;
output  [C_M_AXI_DATA_B_ADDR_WIDTH - 1:0] m_axi_DATA_B_AWADDR;
output  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_AWID;
output  [7:0] m_axi_DATA_B_AWLEN;
output  [2:0] m_axi_DATA_B_AWSIZE;
output  [1:0] m_axi_DATA_B_AWBURST;
output  [1:0] m_axi_DATA_B_AWLOCK;
output  [3:0] m_axi_DATA_B_AWCACHE;
output  [2:0] m_axi_DATA_B_AWPROT;
output  [3:0] m_axi_DATA_B_AWQOS;
output  [3:0] m_axi_DATA_B_AWREGION;
output  [C_M_AXI_DATA_B_AWUSER_WIDTH - 1:0] m_axi_DATA_B_AWUSER;
output   m_axi_DATA_B_WVALID;
input   m_axi_DATA_B_WREADY;
output  [C_M_AXI_DATA_B_DATA_WIDTH - 1:0] m_axi_DATA_B_WDATA;
output  [C_M_AXI_DATA_B_WSTRB_WIDTH - 1:0] m_axi_DATA_B_WSTRB;
output   m_axi_DATA_B_WLAST;
output  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_WID;
output  [C_M_AXI_DATA_B_WUSER_WIDTH - 1:0] m_axi_DATA_B_WUSER;
output   m_axi_DATA_B_ARVALID;
input   m_axi_DATA_B_ARREADY;
output  [C_M_AXI_DATA_B_ADDR_WIDTH - 1:0] m_axi_DATA_B_ARADDR;
output  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_ARID;
output  [7:0] m_axi_DATA_B_ARLEN;
output  [2:0] m_axi_DATA_B_ARSIZE;
output  [1:0] m_axi_DATA_B_ARBURST;
output  [1:0] m_axi_DATA_B_ARLOCK;
output  [3:0] m_axi_DATA_B_ARCACHE;
output  [2:0] m_axi_DATA_B_ARPROT;
output  [3:0] m_axi_DATA_B_ARQOS;
output  [3:0] m_axi_DATA_B_ARREGION;
output  [C_M_AXI_DATA_B_ARUSER_WIDTH - 1:0] m_axi_DATA_B_ARUSER;
input   m_axi_DATA_B_RVALID;
output   m_axi_DATA_B_RREADY;
input  [C_M_AXI_DATA_B_DATA_WIDTH - 1:0] m_axi_DATA_B_RDATA;
input   m_axi_DATA_B_RLAST;
input  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_RID;
input  [C_M_AXI_DATA_B_RUSER_WIDTH - 1:0] m_axi_DATA_B_RUSER;
input  [1:0] m_axi_DATA_B_RRESP;
input   m_axi_DATA_B_BVALID;
output   m_axi_DATA_B_BREADY;
input  [1:0] m_axi_DATA_B_BRESP;
input  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_BID;
input  [C_M_AXI_DATA_B_BUSER_WIDTH - 1:0] m_axi_DATA_B_BUSER;
output   m_axi_DATA_C_AWVALID;
input   m_axi_DATA_C_AWREADY;
output  [C_M_AXI_DATA_C_ADDR_WIDTH - 1:0] m_axi_DATA_C_AWADDR;
output  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_AWID;
output  [7:0] m_axi_DATA_C_AWLEN;
output  [2:0] m_axi_DATA_C_AWSIZE;
output  [1:0] m_axi_DATA_C_AWBURST;
output  [1:0] m_axi_DATA_C_AWLOCK;
output  [3:0] m_axi_DATA_C_AWCACHE;
output  [2:0] m_axi_DATA_C_AWPROT;
output  [3:0] m_axi_DATA_C_AWQOS;
output  [3:0] m_axi_DATA_C_AWREGION;
output  [C_M_AXI_DATA_C_AWUSER_WIDTH - 1:0] m_axi_DATA_C_AWUSER;
output   m_axi_DATA_C_WVALID;
input   m_axi_DATA_C_WREADY;
output  [C_M_AXI_DATA_C_DATA_WIDTH - 1:0] m_axi_DATA_C_WDATA;
output  [C_M_AXI_DATA_C_WSTRB_WIDTH - 1:0] m_axi_DATA_C_WSTRB;
output   m_axi_DATA_C_WLAST;
output  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_WID;
output  [C_M_AXI_DATA_C_WUSER_WIDTH - 1:0] m_axi_DATA_C_WUSER;
output   m_axi_DATA_C_ARVALID;
input   m_axi_DATA_C_ARREADY;
output  [C_M_AXI_DATA_C_ADDR_WIDTH - 1:0] m_axi_DATA_C_ARADDR;
output  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_ARID;
output  [7:0] m_axi_DATA_C_ARLEN;
output  [2:0] m_axi_DATA_C_ARSIZE;
output  [1:0] m_axi_DATA_C_ARBURST;
output  [1:0] m_axi_DATA_C_ARLOCK;
output  [3:0] m_axi_DATA_C_ARCACHE;
output  [2:0] m_axi_DATA_C_ARPROT;
output  [3:0] m_axi_DATA_C_ARQOS;
output  [3:0] m_axi_DATA_C_ARREGION;
output  [C_M_AXI_DATA_C_ARUSER_WIDTH - 1:0] m_axi_DATA_C_ARUSER;
input   m_axi_DATA_C_RVALID;
output   m_axi_DATA_C_RREADY;
input  [C_M_AXI_DATA_C_DATA_WIDTH - 1:0] m_axi_DATA_C_RDATA;
input   m_axi_DATA_C_RLAST;
input  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_RID;
input  [C_M_AXI_DATA_C_RUSER_WIDTH - 1:0] m_axi_DATA_C_RUSER;
input  [1:0] m_axi_DATA_C_RRESP;
input   m_axi_DATA_C_BVALID;
output   m_axi_DATA_C_BREADY;
input  [1:0] m_axi_DATA_C_BRESP;
input  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_BID;
input  [C_M_AXI_DATA_C_BUSER_WIDTH - 1:0] m_axi_DATA_C_BUSER;
output   m_axi_DATA_D_AWVALID;
input   m_axi_DATA_D_AWREADY;
output  [C_M_AXI_DATA_D_ADDR_WIDTH - 1:0] m_axi_DATA_D_AWADDR;
output  [C_M_AXI_DATA_D_ID_WIDTH - 1:0] m_axi_DATA_D_AWID;
output  [7:0] m_axi_DATA_D_AWLEN;
output  [2:0] m_axi_DATA_D_AWSIZE;
output  [1:0] m_axi_DATA_D_AWBURST;
output  [1:0] m_axi_DATA_D_AWLOCK;
output  [3:0] m_axi_DATA_D_AWCACHE;
output  [2:0] m_axi_DATA_D_AWPROT;
output  [3:0] m_axi_DATA_D_AWQOS;
output  [3:0] m_axi_DATA_D_AWREGION;
output  [C_M_AXI_DATA_D_AWUSER_WIDTH - 1:0] m_axi_DATA_D_AWUSER;
output   m_axi_DATA_D_WVALID;
input   m_axi_DATA_D_WREADY;
output  [C_M_AXI_DATA_D_DATA_WIDTH - 1:0] m_axi_DATA_D_WDATA;
output  [C_M_AXI_DATA_D_WSTRB_WIDTH - 1:0] m_axi_DATA_D_WSTRB;
output   m_axi_DATA_D_WLAST;
output  [C_M_AXI_DATA_D_ID_WIDTH - 1:0] m_axi_DATA_D_WID;
output  [C_M_AXI_DATA_D_WUSER_WIDTH - 1:0] m_axi_DATA_D_WUSER;
output   m_axi_DATA_D_ARVALID;
input   m_axi_DATA_D_ARREADY;
output  [C_M_AXI_DATA_D_ADDR_WIDTH - 1:0] m_axi_DATA_D_ARADDR;
output  [C_M_AXI_DATA_D_ID_WIDTH - 1:0] m_axi_DATA_D_ARID;
output  [7:0] m_axi_DATA_D_ARLEN;
output  [2:0] m_axi_DATA_D_ARSIZE;
output  [1:0] m_axi_DATA_D_ARBURST;
output  [1:0] m_axi_DATA_D_ARLOCK;
output  [3:0] m_axi_DATA_D_ARCACHE;
output  [2:0] m_axi_DATA_D_ARPROT;
output  [3:0] m_axi_DATA_D_ARQOS;
output  [3:0] m_axi_DATA_D_ARREGION;
output  [C_M_AXI_DATA_D_ARUSER_WIDTH - 1:0] m_axi_DATA_D_ARUSER;
input   m_axi_DATA_D_RVALID;
output   m_axi_DATA_D_RREADY;
input  [C_M_AXI_DATA_D_DATA_WIDTH - 1:0] m_axi_DATA_D_RDATA;
input   m_axi_DATA_D_RLAST;
input  [C_M_AXI_DATA_D_ID_WIDTH - 1:0] m_axi_DATA_D_RID;
input  [C_M_AXI_DATA_D_RUSER_WIDTH - 1:0] m_axi_DATA_D_RUSER;
input  [1:0] m_axi_DATA_D_RRESP;
input   m_axi_DATA_D_BVALID;
output   m_axi_DATA_D_BREADY;
input  [1:0] m_axi_DATA_D_BRESP;
input  [C_M_AXI_DATA_D_ID_WIDTH - 1:0] m_axi_DATA_D_BID;
input  [C_M_AXI_DATA_D_BUSER_WIDTH - 1:0] m_axi_DATA_D_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [64:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r;
wire   [31:0] weights;
wire   [31:0] bias;
wire   [31:0] output_r;
reg    DATA_A_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    DATA_A_blk_n_R;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond11_fu_681_p2;
reg    DATA_B_blk_n_AR;
wire    ap_CS_fsm_state16;
reg    DATA_B_blk_n_R;
wire    ap_CS_fsm_state23;
wire   [0:0] exitcond7_fu_814_p2;
reg    DATA_C_blk_n_AR;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond10_fu_705_p2;
reg    DATA_C_blk_n_R;
wire    ap_CS_fsm_state31;
wire   [0:0] exitcond6_fu_830_p2;
reg    DATA_D_blk_n_AW;
wire    ap_CS_fsm_state55;
wire   [0:0] exitcond1_fu_1048_p2;
reg    DATA_D_blk_n_W;
wire    ap_CS_fsm_state61;
reg    DATA_D_blk_n_B;
wire    ap_CS_fsm_state65;
wire    DATA_A_AWREADY;
wire    DATA_A_WREADY;
reg    DATA_A_ARVALID;
wire    DATA_A_ARREADY;
wire    DATA_A_RVALID;
reg    DATA_A_RREADY;
wire   [31:0] DATA_A_RDATA;
wire    DATA_A_RLAST;
wire   [0:0] DATA_A_RID;
wire   [0:0] DATA_A_RUSER;
wire   [1:0] DATA_A_RRESP;
wire    DATA_A_BVALID;
wire   [1:0] DATA_A_BRESP;
wire   [0:0] DATA_A_BID;
wire   [0:0] DATA_A_BUSER;
wire    DATA_B_AWREADY;
wire    DATA_B_WREADY;
reg    DATA_B_ARVALID;
wire    DATA_B_ARREADY;
wire    DATA_B_RVALID;
reg    DATA_B_RREADY;
wire   [31:0] DATA_B_RDATA;
wire    DATA_B_RLAST;
wire   [0:0] DATA_B_RID;
wire   [0:0] DATA_B_RUSER;
wire   [1:0] DATA_B_RRESP;
wire    DATA_B_BVALID;
wire   [1:0] DATA_B_BRESP;
wire   [0:0] DATA_B_BID;
wire   [0:0] DATA_B_BUSER;
wire    DATA_C_AWREADY;
wire    DATA_C_WREADY;
reg    DATA_C_ARVALID;
wire    DATA_C_ARREADY;
wire    DATA_C_RVALID;
reg    DATA_C_RREADY;
wire   [31:0] DATA_C_RDATA;
wire    DATA_C_RLAST;
wire   [0:0] DATA_C_RID;
wire   [0:0] DATA_C_RUSER;
wire   [1:0] DATA_C_RRESP;
wire    DATA_C_BVALID;
wire   [1:0] DATA_C_BRESP;
wire   [0:0] DATA_C_BID;
wire   [0:0] DATA_C_BUSER;
reg    DATA_D_AWVALID;
wire    DATA_D_AWREADY;
reg    DATA_D_WVALID;
wire    DATA_D_WREADY;
wire    DATA_D_ARREADY;
wire    DATA_D_RVALID;
wire   [31:0] DATA_D_RDATA;
wire    DATA_D_RLAST;
wire   [0:0] DATA_D_RID;
wire   [0:0] DATA_D_RUSER;
wire   [1:0] DATA_D_RRESP;
wire    DATA_D_BVALID;
reg    DATA_D_BREADY;
wire   [1:0] DATA_D_BRESP;
wire   [0:0] DATA_D_BID;
wire   [0:0] DATA_D_BUSER;
reg   [29:0] tmp_reg_1135;
reg   [31:0] DATA_C_addr_reg_1140;
wire   [31:0] tmp_8_fu_565_p1;
reg   [31:0] tmp_8_reg_1146;
wire   [31:0] tmp_s_fu_579_p1;
reg   [31:0] tmp_s_reg_1151;
wire   [7:0] tmp_10_fu_599_p2;
reg   [7:0] tmp_10_reg_1156;
wire    ap_CS_fsm_state2;
wire   [4:0] i_6_fu_611_p2;
reg   [4:0] i_6_reg_1164;
wire   [31:0] tmp_14_fu_642_p2;
reg   [31:0] tmp_14_reg_1169;
wire    ap_CS_fsm_state3;
wire   [2:0] j_3_fu_654_p2;
reg   [2:0] j_3_reg_1177;
wire   [31:0] tmp_15_fu_660_p2;
reg   [31:0] tmp_15_reg_1182;
wire   [0:0] exitcond12_fu_648_p2;
reg    ap_sig_ioackin_DATA_A_ARREADY;
reg   [8:0] c5_i_addr_reg_1193;
reg    ap_block_state11;
wire   [2:0] k_2_fu_687_p2;
reg   [2:0] k_2_reg_1201;
reg   [31:0] DATA_A_addr_read_reg_1206;
wire   [11:0] tmp_14_cast_fu_701_p1;
reg   [11:0] tmp_14_cast_reg_1211;
reg    ap_sig_ioackin_DATA_C_ARREADY;
reg    ap_block_state13_io;
wire   [6:0] i_8_fu_711_p2;
reg   [6:0] i_8_reg_1219;
wire   [31:0] tmp_18_fu_742_p2;
reg   [31:0] tmp_18_reg_1224;
wire    ap_CS_fsm_state14;
wire   [4:0] j_4_fu_754_p2;
reg   [4:0] j_4_reg_1232;
wire   [31:0] tmp_23_fu_775_p2;
reg   [31:0] tmp_23_reg_1237;
wire    ap_CS_fsm_state15;
wire   [2:0] k_3_fu_787_p2;
reg   [2:0] k_3_reg_1245;
wire   [31:0] tmp_24_fu_793_p2;
reg   [31:0] tmp_24_reg_1250;
wire   [0:0] exitcond8_fu_781_p2;
reg    ap_sig_ioackin_DATA_B_ARREADY;
reg   [15:0] c5_w_addr_reg_1261;
reg    ap_block_state23;
wire   [2:0] l_1_fu_820_p2;
reg   [2:0] l_1_reg_1269;
reg   [31:0] DATA_B_addr_read_reg_1274;
wire   [31:0] i_2_cast7_fu_826_p1;
reg   [31:0] i_2_cast7_reg_1279;
reg    ap_block_state31;
wire   [6:0] i_7_fu_836_p2;
reg   [6:0] i_7_reg_1287;
reg   [31:0] DATA_C_addr_read_reg_1292;
wire   [31:0] co_cast6_fu_842_p1;
reg   [31:0] co_cast6_reg_1297;
wire    ap_CS_fsm_state33;
wire   [11:0] tmp_23_cast_fu_854_p1;
reg   [11:0] tmp_23_cast_reg_1303;
wire   [6:0] co_1_fu_864_p2;
reg   [6:0] co_1_reg_1311;
wire   [31:0] i_3_cast5_fu_870_p1;
reg   [31:0] i_3_cast5_reg_1316;
wire    ap_CS_fsm_state34;
wire   [7:0] i_3_cast5_cast_fu_874_p1;
reg   [7:0] i_3_cast5_cast_reg_1321;
wire   [2:0] m_fu_884_p2;
reg   [2:0] m_reg_1329;
wire   [0:0] exitcond4_fu_878_p2;
wire   [16:0] j_2_cast4_cast1_fu_890_p1;
reg   [16:0] j_2_cast4_cast1_reg_1339;
wire    ap_CS_fsm_state35;
wire   [9:0] j_2_cast4_cast_fu_894_p1;
reg   [9:0] j_2_cast4_cast_reg_1344;
wire   [2:0] n_fu_904_p2;
reg   [2:0] n_reg_1352;
reg   [8:0] c5_i_addr_1_reg_1357;
wire    ap_CS_fsm_state36;
wire   [16:0] tmp_37_fu_1001_p1;
reg   [16:0] tmp_37_reg_1362;
wire   [14:0] tmp_38_fu_1005_p1;
reg   [14:0] tmp_38_reg_1367;
wire   [0:0] exitcond2_fu_1009_p2;
reg   [0:0] exitcond2_reg_1372;
wire   [4:0] ci_1_fu_1015_p2;
reg   [4:0] ci_1_reg_1376;
wire    ap_CS_fsm_state37;
wire   [31:0] c5_w_q0;
reg   [31:0] c5_w_load_reg_1386;
wire    ap_CS_fsm_state38;
wire   [31:0] c5_i_q0;
reg   [31:0] c5_i_load_reg_1391;
wire   [31:0] grp_fu_516_p2;
reg   [31:0] tmp_9_reg_1396;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_510_p2;
wire    ap_CS_fsm_state47;
wire   [31:0] c5_b_q0;
reg   [31:0] c5_b_load_reg_1406;
wire    ap_CS_fsm_state48;
reg   [31:0] tmp_2_reg_1411;
wire    ap_CS_fsm_state53;
wire   [31:0] i_4_cast2_fu_1043_p1;
reg   [31:0] i_4_cast2_reg_1416;
reg    ap_sig_ioackin_DATA_D_AWREADY;
reg    ap_block_state55_io;
wire   [6:0] i_9_fu_1054_p2;
reg   [6:0] i_9_reg_1424;
wire   [31:0] c5_intermediate_0_0_q0;
reg   [31:0] c5_intermediate_0_0_3_reg_1439;
wire    ap_CS_fsm_state56;
wire   [0:0] tmp_6_fu_520_p2;
reg   [0:0] tmp_6_reg_1446;
wire    ap_CS_fsm_state57;
wire   [6:0] i_12_fu_1129_p2;
reg   [6:0] i_12_reg_1454;
wire    ap_CS_fsm_state59;
wire   [0:0] exitcond_fu_1123_p2;
wire   [31:0] c5_o_0_0_q0;
reg   [31:0] c5_o_0_0_load_reg_1464;
wire    ap_CS_fsm_state60;
reg   [8:0] c5_i_address0;
reg    c5_i_ce0;
reg    c5_i_we0;
reg   [15:0] c5_w_address0;
reg    c5_w_ce0;
reg    c5_w_we0;
reg   [6:0] c5_b_address0;
reg    c5_b_ce0;
reg    c5_b_we0;
reg   [6:0] c5_o_0_0_address0;
reg    c5_o_0_0_ce0;
reg    c5_o_0_0_we0;
wire   [31:0] c5_o_0_0_d0;
reg   [6:0] c5_intermediate_0_0_address0;
reg    c5_intermediate_0_0_ce0;
reg    c5_intermediate_0_0_we0;
reg   [4:0] i_reg_320;
reg   [2:0] j_reg_331;
wire   [0:0] exitcond13_fu_605_p2;
reg   [2:0] k_reg_342;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state10;
reg   [6:0] i_1_reg_353;
wire   [0:0] exitcond9_fu_748_p2;
reg   [4:0] j_1_reg_364;
reg   [2:0] k_1_reg_375;
reg   [2:0] l_reg_386;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state22;
reg   [6:0] i_2_reg_397;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state30;
reg   [6:0] co_reg_408;
wire    ap_CS_fsm_state54;
reg   [2:0] i_3_reg_419;
wire   [0:0] exitcond3_fu_898_p2;
wire   [0:0] exitcond5_fu_858_p2;
reg   [31:0] sum_reg_430;
reg   [2:0] j_2_reg_442;
reg   [31:0] sum_1_reg_453;
reg   [4:0] ci_reg_465;
reg   [31:0] sum_2_reg_476;
reg   [6:0] i_4_reg_488;
wire    ap_CS_fsm_state58;
reg   [6:0] i_5_reg_499;
reg    ap_sig_ioackin_DATA_D_WREADY;
wire   [31:0] tmp_19_fu_675_p2;
wire   [31:0] tmp_25_fu_808_p2;
wire   [31:0] tmp_33_cast_fu_964_p1;
wire   [31:0] tmp_40_cast_fu_1038_p1;
wire   [31:0] i_5_cast1_fu_1118_p1;
wire   [31:0] tmp_1_fu_545_p1;
wire   [31:0] tmp_26_fu_1060_p1;
reg    ap_reg_ioackin_DATA_A_ARREADY;
reg    ap_reg_ioackin_DATA_C_ARREADY;
reg    ap_reg_ioackin_DATA_B_ARREADY;
reg    ap_reg_ioackin_DATA_D_AWREADY;
reg    ap_reg_ioackin_DATA_D_WREADY;
reg   [31:0] grp_fu_510_p0;
reg   [31:0] grp_fu_510_p1;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state39;
wire   [29:0] bias5_fu_535_p4;
wire   [29:0] weights3_fu_555_p4;
wire   [29:0] input1_fu_569_p4;
wire   [6:0] tmp_4_fu_587_p3;
wire   [7:0] i_cast_cast_fu_583_p1;
wire   [7:0] p_shl_cast_fu_595_p1;
wire   [7:0] j_cast_cast_fu_617_p1;
wire   [7:0] tmp_12_fu_621_p2;
wire   [9:0] tmp_13_fu_630_p3;
wire   [31:0] tmp_15_cast_fu_626_p1;
wire   [31:0] p_shl9_fu_638_p1;
wire   [31:0] k_cast_fu_671_p1;
wire   [10:0] tmp_11_fu_693_p3;
wire   [11:0] j_1_cast_cast_fu_717_p1;
wire   [11:0] tmp_16_fu_721_p2;
wire   [13:0] tmp_17_fu_730_p3;
wire   [31:0] tmp_18_cast_fu_726_p1;
wire   [31:0] p_shl1_fu_738_p1;
wire   [31:0] k_1_cast9_fu_760_p1;
wire   [31:0] tmp_21_fu_764_p2;
wire   [31:0] tmp_22_fu_769_p2;
wire   [31:0] l_cast8_fu_804_p1;
wire   [10:0] tmp_20_fu_846_p3;
wire   [6:0] tmp_28_fu_918_p3;
wire   [7:0] p_shl3_cast_fu_926_p1;
wire   [7:0] ci_cast3_cast_fu_914_p1;
wire   [7:0] tmp_29_fu_930_p2;
wire   [7:0] tmp_30_fu_936_p2;
wire   [9:0] p_shl4_cast_fu_945_p3;
wire   [9:0] tmp_30_cast_fu_941_p1;
wire   [9:0] tmp_31_fu_953_p2;
wire   [9:0] tmp_32_fu_959_p2;
wire   [11:0] ci_cast3_cast1_fu_910_p1;
wire   [11:0] tmp_33_fu_969_p2;
wire   [13:0] tmp_34_fu_978_p3;
wire   [31:0] p_shl5_fu_986_p1;
wire   [31:0] tmp_34_cast_fu_974_p1;
wire   [31:0] tmp_35_fu_990_p2;
wire   [31:0] tmp_36_fu_996_p2;
wire   [16:0] p_shl6_cast_fu_1021_p3;
wire   [16:0] tmp_39_fu_1028_p2;
wire   [16:0] tmp_40_fu_1033_p2;
wire   [31:0] input_assign_to_int_fu_1070_p1;
wire   [7:0] tmp_3_fu_1073_p4;
wire   [22:0] tmp_27_fu_1083_p1;
wire   [0:0] notrhs_fu_1093_p2;
wire   [0:0] notlhs_fu_1087_p2;
wire   [0:0] tmp_5_fu_1099_p2;
wire   [0:0] tmp_7_fu_1105_p2;
reg   [64:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 65'd1;
#0 ap_reg_ioackin_DATA_A_ARREADY = 1'b0;
#0 ap_reg_ioackin_DATA_C_ARREADY = 1'b0;
#0 ap_reg_ioackin_DATA_B_ARREADY = 1'b0;
#0 ap_reg_ioackin_DATA_D_AWREADY = 1'b0;
#0 ap_reg_ioackin_DATA_D_WREADY = 1'b0;
end

convolution5_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
convolution5_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(32'd0),
    .input_r(input_r),
    .weights(weights),
    .bias(bias),
    .output_r(output_r)
);

convolution5_DATA_A_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_A_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_A_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_A_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_A_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_A_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_A_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_A_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_A_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_A_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_A_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_A_CACHE_VALUE ))
convolution5_DATA_A_m_axi_U(
    .AWVALID(m_axi_DATA_A_AWVALID),
    .AWREADY(m_axi_DATA_A_AWREADY),
    .AWADDR(m_axi_DATA_A_AWADDR),
    .AWID(m_axi_DATA_A_AWID),
    .AWLEN(m_axi_DATA_A_AWLEN),
    .AWSIZE(m_axi_DATA_A_AWSIZE),
    .AWBURST(m_axi_DATA_A_AWBURST),
    .AWLOCK(m_axi_DATA_A_AWLOCK),
    .AWCACHE(m_axi_DATA_A_AWCACHE),
    .AWPROT(m_axi_DATA_A_AWPROT),
    .AWQOS(m_axi_DATA_A_AWQOS),
    .AWREGION(m_axi_DATA_A_AWREGION),
    .AWUSER(m_axi_DATA_A_AWUSER),
    .WVALID(m_axi_DATA_A_WVALID),
    .WREADY(m_axi_DATA_A_WREADY),
    .WDATA(m_axi_DATA_A_WDATA),
    .WSTRB(m_axi_DATA_A_WSTRB),
    .WLAST(m_axi_DATA_A_WLAST),
    .WID(m_axi_DATA_A_WID),
    .WUSER(m_axi_DATA_A_WUSER),
    .ARVALID(m_axi_DATA_A_ARVALID),
    .ARREADY(m_axi_DATA_A_ARREADY),
    .ARADDR(m_axi_DATA_A_ARADDR),
    .ARID(m_axi_DATA_A_ARID),
    .ARLEN(m_axi_DATA_A_ARLEN),
    .ARSIZE(m_axi_DATA_A_ARSIZE),
    .ARBURST(m_axi_DATA_A_ARBURST),
    .ARLOCK(m_axi_DATA_A_ARLOCK),
    .ARCACHE(m_axi_DATA_A_ARCACHE),
    .ARPROT(m_axi_DATA_A_ARPROT),
    .ARQOS(m_axi_DATA_A_ARQOS),
    .ARREGION(m_axi_DATA_A_ARREGION),
    .ARUSER(m_axi_DATA_A_ARUSER),
    .RVALID(m_axi_DATA_A_RVALID),
    .RREADY(m_axi_DATA_A_RREADY),
    .RDATA(m_axi_DATA_A_RDATA),
    .RLAST(m_axi_DATA_A_RLAST),
    .RID(m_axi_DATA_A_RID),
    .RUSER(m_axi_DATA_A_RUSER),
    .RRESP(m_axi_DATA_A_RRESP),
    .BVALID(m_axi_DATA_A_BVALID),
    .BREADY(m_axi_DATA_A_BREADY),
    .BRESP(m_axi_DATA_A_BRESP),
    .BID(m_axi_DATA_A_BID),
    .BUSER(m_axi_DATA_A_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_A_ARVALID),
    .I_ARREADY(DATA_A_ARREADY),
    .I_ARADDR(tmp_15_reg_1182),
    .I_ARID(1'd0),
    .I_ARLEN(32'd5),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_A_RVALID),
    .I_RREADY(DATA_A_RREADY),
    .I_RDATA(DATA_A_RDATA),
    .I_RID(DATA_A_RID),
    .I_RUSER(DATA_A_RUSER),
    .I_RRESP(DATA_A_RRESP),
    .I_RLAST(DATA_A_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_A_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_A_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_A_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_A_BRESP),
    .I_BID(DATA_A_BID),
    .I_BUSER(DATA_A_BUSER)
);

convolution5_DATA_B_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_B_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_B_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_B_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_B_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_B_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_B_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_B_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_B_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_B_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_B_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_B_CACHE_VALUE ))
convolution5_DATA_B_m_axi_U(
    .AWVALID(m_axi_DATA_B_AWVALID),
    .AWREADY(m_axi_DATA_B_AWREADY),
    .AWADDR(m_axi_DATA_B_AWADDR),
    .AWID(m_axi_DATA_B_AWID),
    .AWLEN(m_axi_DATA_B_AWLEN),
    .AWSIZE(m_axi_DATA_B_AWSIZE),
    .AWBURST(m_axi_DATA_B_AWBURST),
    .AWLOCK(m_axi_DATA_B_AWLOCK),
    .AWCACHE(m_axi_DATA_B_AWCACHE),
    .AWPROT(m_axi_DATA_B_AWPROT),
    .AWQOS(m_axi_DATA_B_AWQOS),
    .AWREGION(m_axi_DATA_B_AWREGION),
    .AWUSER(m_axi_DATA_B_AWUSER),
    .WVALID(m_axi_DATA_B_WVALID),
    .WREADY(m_axi_DATA_B_WREADY),
    .WDATA(m_axi_DATA_B_WDATA),
    .WSTRB(m_axi_DATA_B_WSTRB),
    .WLAST(m_axi_DATA_B_WLAST),
    .WID(m_axi_DATA_B_WID),
    .WUSER(m_axi_DATA_B_WUSER),
    .ARVALID(m_axi_DATA_B_ARVALID),
    .ARREADY(m_axi_DATA_B_ARREADY),
    .ARADDR(m_axi_DATA_B_ARADDR),
    .ARID(m_axi_DATA_B_ARID),
    .ARLEN(m_axi_DATA_B_ARLEN),
    .ARSIZE(m_axi_DATA_B_ARSIZE),
    .ARBURST(m_axi_DATA_B_ARBURST),
    .ARLOCK(m_axi_DATA_B_ARLOCK),
    .ARCACHE(m_axi_DATA_B_ARCACHE),
    .ARPROT(m_axi_DATA_B_ARPROT),
    .ARQOS(m_axi_DATA_B_ARQOS),
    .ARREGION(m_axi_DATA_B_ARREGION),
    .ARUSER(m_axi_DATA_B_ARUSER),
    .RVALID(m_axi_DATA_B_RVALID),
    .RREADY(m_axi_DATA_B_RREADY),
    .RDATA(m_axi_DATA_B_RDATA),
    .RLAST(m_axi_DATA_B_RLAST),
    .RID(m_axi_DATA_B_RID),
    .RUSER(m_axi_DATA_B_RUSER),
    .RRESP(m_axi_DATA_B_RRESP),
    .BVALID(m_axi_DATA_B_BVALID),
    .BREADY(m_axi_DATA_B_BREADY),
    .BRESP(m_axi_DATA_B_BRESP),
    .BID(m_axi_DATA_B_BID),
    .BUSER(m_axi_DATA_B_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_B_ARVALID),
    .I_ARREADY(DATA_B_ARREADY),
    .I_ARADDR(tmp_24_reg_1250),
    .I_ARID(1'd0),
    .I_ARLEN(32'd5),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_B_RVALID),
    .I_RREADY(DATA_B_RREADY),
    .I_RDATA(DATA_B_RDATA),
    .I_RID(DATA_B_RID),
    .I_RUSER(DATA_B_RUSER),
    .I_RRESP(DATA_B_RRESP),
    .I_RLAST(DATA_B_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_B_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_B_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_B_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_B_BRESP),
    .I_BID(DATA_B_BID),
    .I_BUSER(DATA_B_BUSER)
);

convolution5_DATA_C_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_C_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_C_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_C_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_C_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_C_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_C_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_C_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_C_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_C_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_C_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_C_CACHE_VALUE ))
convolution5_DATA_C_m_axi_U(
    .AWVALID(m_axi_DATA_C_AWVALID),
    .AWREADY(m_axi_DATA_C_AWREADY),
    .AWADDR(m_axi_DATA_C_AWADDR),
    .AWID(m_axi_DATA_C_AWID),
    .AWLEN(m_axi_DATA_C_AWLEN),
    .AWSIZE(m_axi_DATA_C_AWSIZE),
    .AWBURST(m_axi_DATA_C_AWBURST),
    .AWLOCK(m_axi_DATA_C_AWLOCK),
    .AWCACHE(m_axi_DATA_C_AWCACHE),
    .AWPROT(m_axi_DATA_C_AWPROT),
    .AWQOS(m_axi_DATA_C_AWQOS),
    .AWREGION(m_axi_DATA_C_AWREGION),
    .AWUSER(m_axi_DATA_C_AWUSER),
    .WVALID(m_axi_DATA_C_WVALID),
    .WREADY(m_axi_DATA_C_WREADY),
    .WDATA(m_axi_DATA_C_WDATA),
    .WSTRB(m_axi_DATA_C_WSTRB),
    .WLAST(m_axi_DATA_C_WLAST),
    .WID(m_axi_DATA_C_WID),
    .WUSER(m_axi_DATA_C_WUSER),
    .ARVALID(m_axi_DATA_C_ARVALID),
    .ARREADY(m_axi_DATA_C_ARREADY),
    .ARADDR(m_axi_DATA_C_ARADDR),
    .ARID(m_axi_DATA_C_ARID),
    .ARLEN(m_axi_DATA_C_ARLEN),
    .ARSIZE(m_axi_DATA_C_ARSIZE),
    .ARBURST(m_axi_DATA_C_ARBURST),
    .ARLOCK(m_axi_DATA_C_ARLOCK),
    .ARCACHE(m_axi_DATA_C_ARCACHE),
    .ARPROT(m_axi_DATA_C_ARPROT),
    .ARQOS(m_axi_DATA_C_ARQOS),
    .ARREGION(m_axi_DATA_C_ARREGION),
    .ARUSER(m_axi_DATA_C_ARUSER),
    .RVALID(m_axi_DATA_C_RVALID),
    .RREADY(m_axi_DATA_C_RREADY),
    .RDATA(m_axi_DATA_C_RDATA),
    .RLAST(m_axi_DATA_C_RLAST),
    .RID(m_axi_DATA_C_RID),
    .RUSER(m_axi_DATA_C_RUSER),
    .RRESP(m_axi_DATA_C_RRESP),
    .BVALID(m_axi_DATA_C_BVALID),
    .BREADY(m_axi_DATA_C_BREADY),
    .BRESP(m_axi_DATA_C_BRESP),
    .BID(m_axi_DATA_C_BID),
    .BUSER(m_axi_DATA_C_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_C_ARVALID),
    .I_ARREADY(DATA_C_ARREADY),
    .I_ARADDR(DATA_C_addr_reg_1140),
    .I_ARID(1'd0),
    .I_ARLEN(32'd120),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_C_RVALID),
    .I_RREADY(DATA_C_RREADY),
    .I_RDATA(DATA_C_RDATA),
    .I_RID(DATA_C_RID),
    .I_RUSER(DATA_C_RUSER),
    .I_RRESP(DATA_C_RRESP),
    .I_RLAST(DATA_C_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_C_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_C_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_C_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_C_BRESP),
    .I_BID(DATA_C_BID),
    .I_BUSER(DATA_C_BUSER)
);

convolution5_DATA_D_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_D_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_D_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_D_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_D_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_D_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_D_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_D_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_D_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_D_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_D_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_D_CACHE_VALUE ))
convolution5_DATA_D_m_axi_U(
    .AWVALID(m_axi_DATA_D_AWVALID),
    .AWREADY(m_axi_DATA_D_AWREADY),
    .AWADDR(m_axi_DATA_D_AWADDR),
    .AWID(m_axi_DATA_D_AWID),
    .AWLEN(m_axi_DATA_D_AWLEN),
    .AWSIZE(m_axi_DATA_D_AWSIZE),
    .AWBURST(m_axi_DATA_D_AWBURST),
    .AWLOCK(m_axi_DATA_D_AWLOCK),
    .AWCACHE(m_axi_DATA_D_AWCACHE),
    .AWPROT(m_axi_DATA_D_AWPROT),
    .AWQOS(m_axi_DATA_D_AWQOS),
    .AWREGION(m_axi_DATA_D_AWREGION),
    .AWUSER(m_axi_DATA_D_AWUSER),
    .WVALID(m_axi_DATA_D_WVALID),
    .WREADY(m_axi_DATA_D_WREADY),
    .WDATA(m_axi_DATA_D_WDATA),
    .WSTRB(m_axi_DATA_D_WSTRB),
    .WLAST(m_axi_DATA_D_WLAST),
    .WID(m_axi_DATA_D_WID),
    .WUSER(m_axi_DATA_D_WUSER),
    .ARVALID(m_axi_DATA_D_ARVALID),
    .ARREADY(m_axi_DATA_D_ARREADY),
    .ARADDR(m_axi_DATA_D_ARADDR),
    .ARID(m_axi_DATA_D_ARID),
    .ARLEN(m_axi_DATA_D_ARLEN),
    .ARSIZE(m_axi_DATA_D_ARSIZE),
    .ARBURST(m_axi_DATA_D_ARBURST),
    .ARLOCK(m_axi_DATA_D_ARLOCK),
    .ARCACHE(m_axi_DATA_D_ARCACHE),
    .ARPROT(m_axi_DATA_D_ARPROT),
    .ARQOS(m_axi_DATA_D_ARQOS),
    .ARREGION(m_axi_DATA_D_ARREGION),
    .ARUSER(m_axi_DATA_D_ARUSER),
    .RVALID(m_axi_DATA_D_RVALID),
    .RREADY(m_axi_DATA_D_RREADY),
    .RDATA(m_axi_DATA_D_RDATA),
    .RLAST(m_axi_DATA_D_RLAST),
    .RID(m_axi_DATA_D_RID),
    .RUSER(m_axi_DATA_D_RUSER),
    .RRESP(m_axi_DATA_D_RRESP),
    .BVALID(m_axi_DATA_D_BVALID),
    .BREADY(m_axi_DATA_D_BREADY),
    .BRESP(m_axi_DATA_D_BRESP),
    .BID(m_axi_DATA_D_BID),
    .BUSER(m_axi_DATA_D_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(DATA_D_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_D_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(DATA_D_RDATA),
    .I_RID(DATA_D_RID),
    .I_RUSER(DATA_D_RUSER),
    .I_RRESP(DATA_D_RRESP),
    .I_RLAST(DATA_D_RLAST),
    .I_AWVALID(DATA_D_AWVALID),
    .I_AWREADY(DATA_D_AWREADY),
    .I_AWADDR(tmp_26_fu_1060_p1),
    .I_AWID(1'd0),
    .I_AWLEN(32'd120),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(DATA_D_WVALID),
    .I_WREADY(DATA_D_WREADY),
    .I_WDATA(c5_o_0_0_load_reg_1464),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(DATA_D_BVALID),
    .I_BREADY(DATA_D_BREADY),
    .I_BRESP(DATA_D_BRESP),
    .I_BID(DATA_D_BID),
    .I_BUSER(DATA_D_BUSER)
);

convolution5_c5_i #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
c5_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c5_i_address0),
    .ce0(c5_i_ce0),
    .we0(c5_i_we0),
    .d0(DATA_A_addr_read_reg_1206),
    .q0(c5_i_q0)
);

convolution5_c5_w #(
    .DataWidth( 32 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
c5_w_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c5_w_address0),
    .ce0(c5_w_ce0),
    .we0(c5_w_we0),
    .d0(DATA_B_addr_read_reg_1274),
    .q0(c5_w_q0)
);

convolution5_c5_b #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
c5_b_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c5_b_address0),
    .ce0(c5_b_ce0),
    .we0(c5_b_we0),
    .d0(DATA_C_addr_read_reg_1292),
    .q0(c5_b_q0)
);

convolution5_c5_b #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
c5_o_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c5_o_0_0_address0),
    .ce0(c5_o_0_0_ce0),
    .we0(c5_o_0_0_we0),
    .d0(c5_o_0_0_d0),
    .q0(c5_o_0_0_q0)
);

convolution5_c5_b #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
c5_intermediate_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c5_intermediate_0_0_address0),
    .ce0(c5_intermediate_0_0_ce0),
    .we0(c5_intermediate_0_0_we0),
    .d0(tmp_2_reg_1411),
    .q0(c5_intermediate_0_0_q0)
);

convolution5_fadddEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution5_fadddEe_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_510_p0),
    .din1(grp_fu_510_p1),
    .ce(1'b1),
    .dout(grp_fu_510_p2)
);

convolution5_fmuleOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolution5_fmuleOg_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(c5_w_load_reg_1386),
    .din1(c5_i_load_reg_1391),
    .ce(1'b1),
    .dout(grp_fu_516_p2)
);

convolution5_fcmpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
convolution5_fcmpfYi_U2(
    .din0(c5_intermediate_0_0_3_reg_1439),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_6_fu_520_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_A_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_sig_ioackin_DATA_A_ARREADY == 1'b1)) begin
                ap_reg_ioackin_DATA_A_ARREADY <= 1'b0;
            end else if ((1'b1 == DATA_A_ARREADY)) begin
                ap_reg_ioackin_DATA_A_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_B_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            if ((ap_sig_ioackin_DATA_B_ARREADY == 1'b1)) begin
                ap_reg_ioackin_DATA_B_ARREADY <= 1'b0;
            end else if ((1'b1 == DATA_B_ARREADY)) begin
                ap_reg_ioackin_DATA_B_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_C_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state13) & (exitcond10_fu_705_p2 == 1'd1))) begin
            if ((ap_block_state13_io == 1'b0)) begin
                ap_reg_ioackin_DATA_C_ARREADY <= 1'b0;
            end else if ((1'b1 == DATA_C_ARREADY)) begin
                ap_reg_ioackin_DATA_C_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_D_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state55) & (1'd1 == exitcond1_fu_1048_p2))) begin
            if ((ap_block_state55_io == 1'b0)) begin
                ap_reg_ioackin_DATA_D_AWREADY <= 1'b0;
            end else if ((1'b1 == DATA_D_AWREADY)) begin
                ap_reg_ioackin_DATA_D_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_D_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state61)) begin
            if ((ap_sig_ioackin_DATA_D_WREADY == 1'b1)) begin
                ap_reg_ioackin_DATA_D_WREADY <= 1'b0;
            end else if ((1'b1 == DATA_D_WREADY)) begin
                ap_reg_ioackin_DATA_D_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'd0 == exitcond3_fu_898_p2))) begin
        ci_reg_465 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        ci_reg_465 <= ci_1_reg_1376;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & ~((1'd0 == exitcond6_fu_830_p2) & (1'b0 == DATA_C_RVALID)) & (1'd1 == exitcond6_fu_830_p2))) begin
        co_reg_408 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        co_reg_408 <= co_1_reg_1311;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond13_fu_605_p2))) begin
        i_1_reg_353 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond9_fu_748_p2))) begin
        i_1_reg_353 <= i_8_reg_1219;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_2_reg_397 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        i_2_reg_397 <= i_7_reg_1287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (1'd0 == exitcond5_fu_858_p2))) begin
        i_3_reg_419 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state35) & (1'd1 == exitcond3_fu_898_p2))) begin
        i_3_reg_419 <= m_reg_1329;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (1'd1 == exitcond5_fu_858_p2))) begin
        i_4_reg_488 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        i_4_reg_488 <= i_9_reg_1424;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & (1'd1 == exitcond1_fu_1048_p2) & (ap_block_state55_io == 1'b0))) begin
        i_5_reg_499 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state61) & (ap_sig_ioackin_DATA_D_WREADY == 1'b1))) begin
        i_5_reg_499 <= i_12_reg_1454;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond12_fu_648_p2))) begin
        i_reg_320 <= i_6_reg_1164;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_320 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (ap_block_state13_io == 1'b0) & (1'd0 == exitcond10_fu_705_p2))) begin
        j_1_reg_364 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond8_fu_781_p2))) begin
        j_1_reg_364 <= j_4_reg_1232;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (1'd0 == exitcond4_fu_878_p2))) begin
        j_2_reg_442 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state37) & (1'd1 == exitcond2_reg_1372))) begin
        j_2_reg_442 <= n_reg_1352;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond13_fu_605_p2))) begin
        j_reg_331 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & ~((exitcond11_fu_681_p2 == 1'd0) & (1'b0 == DATA_A_RVALID)) & (exitcond11_fu_681_p2 == 1'd1))) begin
        j_reg_331 <= j_3_reg_1177;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == exitcond9_fu_748_p2))) begin
        k_1_reg_375 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state23) & ~((1'd0 == exitcond7_fu_814_p2) & (1'b0 == DATA_B_RVALID)) & (exitcond7_fu_814_p2 == 1'd1))) begin
        k_1_reg_375 <= k_3_reg_1245;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_reg_342 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        k_reg_342 <= k_2_reg_1201;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        l_reg_386 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        l_reg_386 <= l_1_reg_1269;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (1'd0 == exitcond4_fu_878_p2))) begin
        sum_1_reg_453 <= sum_reg_430;
    end else if (((1'b1 == ap_CS_fsm_state37) & (1'd1 == exitcond2_reg_1372))) begin
        sum_1_reg_453 <= sum_2_reg_476;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (1'd0 == exitcond3_fu_898_p2))) begin
        sum_2_reg_476 <= sum_1_reg_453;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        sum_2_reg_476 <= grp_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (1'd0 == exitcond5_fu_858_p2))) begin
        sum_reg_430 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state35) & (1'd1 == exitcond3_fu_898_p2))) begin
        sum_reg_430 <= sum_1_reg_453;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond11_fu_681_p2 == 1'd0) & ~((exitcond11_fu_681_p2 == 1'd0) & (1'b0 == DATA_A_RVALID)))) begin
        DATA_A_addr_read_reg_1206 <= DATA_A_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond7_fu_814_p2) & ~((1'd0 == exitcond7_fu_814_p2) & (1'b0 == DATA_B_RVALID)))) begin
        DATA_B_addr_read_reg_1274 <= DATA_B_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (1'd0 == exitcond6_fu_830_p2) & ~((1'd0 == exitcond6_fu_830_p2) & (1'b0 == DATA_C_RVALID)))) begin
        DATA_C_addr_read_reg_1292 <= DATA_C_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        DATA_C_addr_reg_1140[29 : 0] <= tmp_1_fu_545_p1[29 : 0];
        tmp_8_reg_1146[29 : 0] <= tmp_8_fu_565_p1[29 : 0];
        tmp_reg_1135 <= {{output_r[31:2]}};
        tmp_s_reg_1151[29 : 0] <= tmp_s_fu_579_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        c5_b_load_reg_1406 <= c5_b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        c5_i_addr_1_reg_1357 <= tmp_33_cast_fu_964_p1;
        ci_1_reg_1376 <= ci_1_fu_1015_p2;
        exitcond2_reg_1372 <= exitcond2_fu_1009_p2;
        tmp_37_reg_1362 <= tmp_37_fu_1001_p1;
        tmp_38_reg_1367 <= tmp_38_fu_1005_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~((exitcond11_fu_681_p2 == 1'd0) & (1'b0 == DATA_A_RVALID)))) begin
        c5_i_addr_reg_1193 <= tmp_19_fu_675_p2;
        k_2_reg_1201 <= k_2_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        c5_i_load_reg_1391 <= c5_i_q0;
        c5_w_load_reg_1386 <= c5_w_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        c5_intermediate_0_0_3_reg_1439 <= c5_intermediate_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        c5_o_0_0_load_reg_1464 <= c5_o_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & ~((1'd0 == exitcond7_fu_814_p2) & (1'b0 == DATA_B_RVALID)))) begin
        c5_w_addr_reg_1261 <= tmp_25_fu_808_p2;
        l_1_reg_1269 <= l_1_fu_820_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        co_1_reg_1311 <= co_1_fu_864_p2;
        co_cast6_reg_1297[6 : 0] <= co_cast6_fu_842_p1[6 : 0];
        tmp_23_cast_reg_1303[10 : 4] <= tmp_23_cast_fu_854_p1[10 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        i_12_reg_1454 <= i_12_fu_1129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & ~((1'd0 == exitcond6_fu_830_p2) & (1'b0 == DATA_C_RVALID)))) begin
        i_2_cast7_reg_1279[6 : 0] <= i_2_cast7_fu_826_p1[6 : 0];
        i_7_reg_1287 <= i_7_fu_836_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        i_3_cast5_cast_reg_1321[2 : 0] <= i_3_cast5_cast_fu_874_p1[2 : 0];
        i_3_cast5_reg_1316[2 : 0] <= i_3_cast5_fu_870_p1[2 : 0];
        m_reg_1329 <= m_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & (ap_block_state55_io == 1'b0))) begin
        i_4_cast2_reg_1416[6 : 0] <= i_4_cast2_fu_1043_p1[6 : 0];
        i_9_reg_1424 <= i_9_fu_1054_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_6_reg_1164 <= i_6_fu_611_p2;
        tmp_10_reg_1156 <= tmp_10_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (ap_block_state13_io == 1'b0))) begin
        i_8_reg_1219 <= i_8_fu_711_p2;
        tmp_14_cast_reg_1211[10 : 4] <= tmp_14_cast_fu_701_p1[10 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        j_2_cast4_cast1_reg_1339[2 : 0] <= j_2_cast4_cast1_fu_890_p1[2 : 0];
        j_2_cast4_cast_reg_1344[2 : 0] <= j_2_cast4_cast_fu_894_p1[2 : 0];
        n_reg_1352 <= n_fu_904_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_3_reg_1177 <= j_3_fu_654_p2;
        tmp_14_reg_1169 <= tmp_14_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_4_reg_1232 <= j_4_fu_754_p2;
        tmp_18_reg_1224 <= tmp_18_fu_742_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        k_3_reg_1245 <= k_3_fu_787_p2;
        tmp_23_reg_1237 <= tmp_23_fu_775_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond12_fu_648_p2))) begin
        tmp_15_reg_1182 <= tmp_15_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd0 == exitcond8_fu_781_p2))) begin
        tmp_24_reg_1250 <= tmp_24_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        tmp_2_reg_1411 <= grp_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        tmp_6_reg_1446 <= tmp_6_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_9_reg_1396 <= grp_fu_516_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_reg_ioackin_DATA_A_ARREADY))) begin
        DATA_A_ARVALID = 1'b1;
    end else begin
        DATA_A_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond11_fu_681_p2 == 1'd0) & ~((exitcond11_fu_681_p2 == 1'd0) & (1'b0 == DATA_A_RVALID)))) begin
        DATA_A_RREADY = 1'b1;
    end else begin
        DATA_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        DATA_A_blk_n_AR = m_axi_DATA_A_ARREADY;
    end else begin
        DATA_A_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond11_fu_681_p2 == 1'd0))) begin
        DATA_A_blk_n_R = m_axi_DATA_A_RVALID;
    end else begin
        DATA_A_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'b0 == ap_reg_ioackin_DATA_B_ARREADY))) begin
        DATA_B_ARVALID = 1'b1;
    end else begin
        DATA_B_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond7_fu_814_p2) & ~((1'd0 == exitcond7_fu_814_p2) & (1'b0 == DATA_B_RVALID)))) begin
        DATA_B_RREADY = 1'b1;
    end else begin
        DATA_B_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        DATA_B_blk_n_AR = m_axi_DATA_B_ARREADY;
    end else begin
        DATA_B_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond7_fu_814_p2))) begin
        DATA_B_blk_n_R = m_axi_DATA_B_RVALID;
    end else begin
        DATA_B_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond10_fu_705_p2 == 1'd1) & (1'b0 == ap_reg_ioackin_DATA_C_ARREADY))) begin
        DATA_C_ARVALID = 1'b1;
    end else begin
        DATA_C_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) & (1'd0 == exitcond6_fu_830_p2) & ~((1'd0 == exitcond6_fu_830_p2) & (1'b0 == DATA_C_RVALID)))) begin
        DATA_C_RREADY = 1'b1;
    end else begin
        DATA_C_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond10_fu_705_p2 == 1'd1))) begin
        DATA_C_blk_n_AR = m_axi_DATA_C_ARREADY;
    end else begin
        DATA_C_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) & (1'd0 == exitcond6_fu_830_p2))) begin
        DATA_C_blk_n_R = m_axi_DATA_C_RVALID;
    end else begin
        DATA_C_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) & (1'd1 == exitcond1_fu_1048_p2) & (1'b0 == ap_reg_ioackin_DATA_D_AWREADY))) begin
        DATA_D_AWVALID = 1'b1;
    end else begin
        DATA_D_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) & (DATA_D_BVALID == 1'b1))) begin
        DATA_D_BREADY = 1'b1;
    end else begin
        DATA_D_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) & (1'b0 == ap_reg_ioackin_DATA_D_WREADY))) begin
        DATA_D_WVALID = 1'b1;
    end else begin
        DATA_D_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) & (1'd1 == exitcond1_fu_1048_p2))) begin
        DATA_D_blk_n_AW = m_axi_DATA_D_AWREADY;
    end else begin
        DATA_D_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        DATA_D_blk_n_B = m_axi_DATA_D_BVALID;
    end else begin
        DATA_D_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        DATA_D_blk_n_W = m_axi_DATA_D_WREADY;
    end else begin
        DATA_D_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) & (DATA_D_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) & (DATA_D_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_A_ARREADY)) begin
        ap_sig_ioackin_DATA_A_ARREADY = DATA_A_ARREADY;
    end else begin
        ap_sig_ioackin_DATA_A_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_B_ARREADY)) begin
        ap_sig_ioackin_DATA_B_ARREADY = DATA_B_ARREADY;
    end else begin
        ap_sig_ioackin_DATA_B_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_C_ARREADY)) begin
        ap_sig_ioackin_DATA_C_ARREADY = DATA_C_ARREADY;
    end else begin
        ap_sig_ioackin_DATA_C_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_D_AWREADY)) begin
        ap_sig_ioackin_DATA_D_AWREADY = DATA_D_AWREADY;
    end else begin
        ap_sig_ioackin_DATA_D_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_D_WREADY)) begin
        ap_sig_ioackin_DATA_D_WREADY = DATA_D_WREADY;
    end else begin
        ap_sig_ioackin_DATA_D_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        c5_b_address0 = co_cast6_reg_1297;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        c5_b_address0 = i_2_cast7_reg_1279;
    end else begin
        c5_b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32))) begin
        c5_b_ce0 = 1'b1;
    end else begin
        c5_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        c5_b_we0 = 1'b1;
    end else begin
        c5_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        c5_i_address0 = c5_i_addr_1_reg_1357;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        c5_i_address0 = c5_i_addr_reg_1193;
    end else begin
        c5_i_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state12))) begin
        c5_i_ce0 = 1'b1;
    end else begin
        c5_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c5_i_we0 = 1'b1;
    end else begin
        c5_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        c5_intermediate_0_0_address0 = i_4_cast2_fu_1043_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        c5_intermediate_0_0_address0 = co_cast6_reg_1297;
    end else begin
        c5_intermediate_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state55) & (ap_block_state55_io == 1'b0)) | (1'b1 == ap_CS_fsm_state54))) begin
        c5_intermediate_0_0_ce0 = 1'b1;
    end else begin
        c5_intermediate_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        c5_intermediate_0_0_we0 = 1'b1;
    end else begin
        c5_intermediate_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        c5_o_0_0_address0 = i_5_cast1_fu_1118_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        c5_o_0_0_address0 = i_4_cast2_reg_1416;
    end else begin
        c5_o_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58))) begin
        c5_o_0_0_ce0 = 1'b1;
    end else begin
        c5_o_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        c5_o_0_0_we0 = 1'b1;
    end else begin
        c5_o_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        c5_w_address0 = tmp_40_cast_fu_1038_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        c5_w_address0 = c5_w_addr_reg_1261;
    end else begin
        c5_w_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state24))) begin
        c5_w_ce0 = 1'b1;
    end else begin
        c5_w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        c5_w_we0 = 1'b1;
    end else begin
        c5_w_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_510_p0 = sum_reg_430;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_510_p0 = sum_2_reg_476;
    end else begin
        grp_fu_510_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_510_p1 = c5_b_load_reg_1406;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_510_p1 = tmp_9_reg_1396;
    end else begin
        grp_fu_510_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond13_fu_605_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond12_fu_648_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_DATA_A_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & ~((exitcond11_fu_681_p2 == 1'd0) & (1'b0 == DATA_A_RVALID)) & (exitcond11_fu_681_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond11_fu_681_p2 == 1'd0) & ~((exitcond11_fu_681_p2 == 1'd0) & (1'b0 == DATA_A_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (ap_block_state13_io == 1'b0) & (1'd0 == exitcond10_fu_705_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond10_fu_705_p2 == 1'd1) & (ap_block_state13_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond9_fu_748_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond8_fu_781_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (ap_sig_ioackin_DATA_B_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & ~((1'd0 == exitcond7_fu_814_p2) & (1'b0 == DATA_B_RVALID)) & (exitcond7_fu_814_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond7_fu_814_p2) & ~((1'd0 == exitcond7_fu_814_p2) & (1'b0 == DATA_B_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & ~((1'd0 == exitcond6_fu_830_p2) & (1'b0 == DATA_C_RVALID)) & (1'd1 == exitcond6_fu_830_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else if (((1'b1 == ap_CS_fsm_state31) & (1'd0 == exitcond6_fu_830_p2) & ~((1'd0 == exitcond6_fu_830_p2) & (1'b0 == DATA_C_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (1'd1 == exitcond5_fu_858_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (1'd0 == exitcond4_fu_878_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (1'd1 == exitcond3_fu_898_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (1'd1 == exitcond2_reg_1372))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (1'd1 == exitcond1_fu_1048_p2) & (ap_block_state55_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else if (((1'b1 == ap_CS_fsm_state55) & (ap_block_state55_io == 1'b0) & (1'd0 == exitcond1_fu_1048_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & (1'd1 == exitcond_fu_1123_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (ap_sig_ioackin_DATA_D_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == ap_CS_fsm_state65) & (DATA_D_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

always @ (*) begin
    ap_block_state11 = ((exitcond11_fu_681_p2 == 1'd0) & (1'b0 == DATA_A_RVALID));
end

always @ (*) begin
    ap_block_state13_io = ((exitcond10_fu_705_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_DATA_C_ARREADY));
end

always @ (*) begin
    ap_block_state23 = ((1'd0 == exitcond7_fu_814_p2) & (1'b0 == DATA_B_RVALID));
end

always @ (*) begin
    ap_block_state31 = ((1'd0 == exitcond6_fu_830_p2) & (1'b0 == DATA_C_RVALID));
end

always @ (*) begin
    ap_block_state55_io = ((1'd1 == exitcond1_fu_1048_p2) & (1'b0 == ap_sig_ioackin_DATA_D_AWREADY));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias5_fu_535_p4 = {{bias[31:2]}};

assign c5_o_0_0_d0 = ((tmp_7_fu_1105_p2[0:0] === 1'b1) ? c5_intermediate_0_0_3_reg_1439 : 32'd0);

assign ci_1_fu_1015_p2 = (5'd1 + ci_reg_465);

assign ci_cast3_cast1_fu_910_p1 = ci_reg_465;

assign ci_cast3_cast_fu_914_p1 = ci_reg_465;

assign co_1_fu_864_p2 = (co_reg_408 + 7'd1);

assign co_cast6_fu_842_p1 = co_reg_408;

assign exitcond10_fu_705_p2 = ((i_1_reg_353 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond11_fu_681_p2 = ((k_reg_342 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond12_fu_648_p2 = ((j_reg_331 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond13_fu_605_p2 = ((i_reg_320 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond1_fu_1048_p2 = ((i_4_reg_488 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond2_fu_1009_p2 = ((ci_reg_465 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond3_fu_898_p2 = ((j_2_reg_442 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_878_p2 = ((i_3_reg_419 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond5_fu_858_p2 = ((co_reg_408 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond6_fu_830_p2 = ((i_2_reg_397 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond7_fu_814_p2 = ((l_reg_386 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond8_fu_781_p2 = ((k_1_reg_375 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond9_fu_748_p2 = ((j_1_reg_364 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_1123_p2 = ((i_5_reg_499 == 7'd120) ? 1'b1 : 1'b0);

assign i_12_fu_1129_p2 = (i_5_reg_499 + 7'd1);

assign i_2_cast7_fu_826_p1 = i_2_reg_397;

assign i_3_cast5_cast_fu_874_p1 = i_3_reg_419;

assign i_3_cast5_fu_870_p1 = i_3_reg_419;

assign i_4_cast2_fu_1043_p1 = i_4_reg_488;

assign i_5_cast1_fu_1118_p1 = i_5_reg_499;

assign i_6_fu_611_p2 = (i_reg_320 + 5'd1);

assign i_7_fu_836_p2 = (i_2_reg_397 + 7'd1);

assign i_8_fu_711_p2 = (i_1_reg_353 + 7'd1);

assign i_9_fu_1054_p2 = (i_4_reg_488 + 7'd1);

assign i_cast_cast_fu_583_p1 = i_reg_320;

assign input1_fu_569_p4 = {{input_r[31:2]}};

assign input_assign_to_int_fu_1070_p1 = c5_intermediate_0_0_3_reg_1439;

assign j_1_cast_cast_fu_717_p1 = j_1_reg_364;

assign j_2_cast4_cast1_fu_890_p1 = j_2_reg_442;

assign j_2_cast4_cast_fu_894_p1 = j_2_reg_442;

assign j_3_fu_654_p2 = (j_reg_331 + 3'd1);

assign j_4_fu_754_p2 = (j_1_reg_364 + 5'd1);

assign j_cast_cast_fu_617_p1 = j_reg_331;

assign k_1_cast9_fu_760_p1 = k_1_reg_375;

assign k_2_fu_687_p2 = (k_reg_342 + 3'd1);

assign k_3_fu_787_p2 = (3'd1 + k_1_reg_375);

assign k_cast_fu_671_p1 = k_reg_342;

assign l_1_fu_820_p2 = (l_reg_386 + 3'd1);

assign l_cast8_fu_804_p1 = l_reg_386;

assign m_fu_884_p2 = (i_3_reg_419 + 3'd1);

assign n_fu_904_p2 = (j_2_reg_442 + 3'd1);

assign notlhs_fu_1087_p2 = ((tmp_3_fu_1073_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_1093_p2 = ((tmp_27_fu_1083_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_shl1_fu_738_p1 = tmp_17_fu_730_p3;

assign p_shl3_cast_fu_926_p1 = tmp_28_fu_918_p3;

assign p_shl4_cast_fu_945_p3 = {{tmp_30_fu_936_p2}, {2'd0}};

assign p_shl5_fu_986_p1 = tmp_34_fu_978_p3;

assign p_shl6_cast_fu_1021_p3 = {{tmp_38_reg_1367}, {2'd0}};

assign p_shl9_fu_638_p1 = tmp_13_fu_630_p3;

assign p_shl_cast_fu_595_p1 = tmp_4_fu_587_p3;

assign tmp_10_fu_599_p2 = (i_cast_cast_fu_583_p1 + p_shl_cast_fu_595_p1);

assign tmp_11_fu_693_p3 = {{i_1_reg_353}, {4'd0}};

assign tmp_12_fu_621_p2 = (tmp_10_reg_1156 + j_cast_cast_fu_617_p1);

assign tmp_13_fu_630_p3 = {{tmp_12_fu_621_p2}, {2'd0}};

assign tmp_14_cast_fu_701_p1 = tmp_11_fu_693_p3;

assign tmp_14_fu_642_p2 = (tmp_15_cast_fu_626_p1 + p_shl9_fu_638_p1);

assign tmp_15_cast_fu_626_p1 = tmp_12_fu_621_p2;

assign tmp_15_fu_660_p2 = (tmp_s_reg_1151 + tmp_14_fu_642_p2);

assign tmp_16_fu_721_p2 = (tmp_14_cast_reg_1211 + j_1_cast_cast_fu_717_p1);

assign tmp_17_fu_730_p3 = {{tmp_16_fu_721_p2}, {2'd0}};

assign tmp_18_cast_fu_726_p1 = tmp_16_fu_721_p2;

assign tmp_18_fu_742_p2 = (tmp_18_cast_fu_726_p1 + p_shl1_fu_738_p1);

assign tmp_19_fu_675_p2 = (k_cast_fu_671_p1 + tmp_14_reg_1169);

assign tmp_1_fu_545_p1 = bias5_fu_535_p4;

assign tmp_20_fu_846_p3 = {{co_reg_408}, {4'd0}};

assign tmp_21_fu_764_p2 = (tmp_18_reg_1224 + k_1_cast9_fu_760_p1);

assign tmp_22_fu_769_p2 = tmp_21_fu_764_p2 << 32'd2;

assign tmp_23_cast_fu_854_p1 = tmp_20_fu_846_p3;

assign tmp_23_fu_775_p2 = (tmp_21_fu_764_p2 + tmp_22_fu_769_p2);

assign tmp_24_fu_793_p2 = (tmp_8_reg_1146 + tmp_23_fu_775_p2);

assign tmp_25_fu_808_p2 = (l_cast8_fu_804_p1 + tmp_23_reg_1237);

assign tmp_26_fu_1060_p1 = tmp_reg_1135;

assign tmp_27_fu_1083_p1 = input_assign_to_int_fu_1070_p1[22:0];

assign tmp_28_fu_918_p3 = {{ci_reg_465}, {2'd0}};

assign tmp_29_fu_930_p2 = (p_shl3_cast_fu_926_p1 + ci_cast3_cast_fu_914_p1);

assign tmp_30_cast_fu_941_p1 = tmp_30_fu_936_p2;

assign tmp_30_fu_936_p2 = (i_3_cast5_cast_reg_1321 + tmp_29_fu_930_p2);

assign tmp_31_fu_953_p2 = (p_shl4_cast_fu_945_p3 + tmp_30_cast_fu_941_p1);

assign tmp_32_fu_959_p2 = (j_2_cast4_cast_reg_1344 + tmp_31_fu_953_p2);

assign tmp_33_cast_fu_964_p1 = tmp_32_fu_959_p2;

assign tmp_33_fu_969_p2 = (ci_cast3_cast1_fu_910_p1 + tmp_23_cast_reg_1303);

assign tmp_34_cast_fu_974_p1 = tmp_33_fu_969_p2;

assign tmp_34_fu_978_p3 = {{tmp_33_fu_969_p2}, {2'd0}};

assign tmp_35_fu_990_p2 = (p_shl5_fu_986_p1 + tmp_34_cast_fu_974_p1);

assign tmp_36_fu_996_p2 = (i_3_cast5_reg_1316 + tmp_35_fu_990_p2);

assign tmp_37_fu_1001_p1 = tmp_36_fu_996_p2[16:0];

assign tmp_38_fu_1005_p1 = tmp_36_fu_996_p2[14:0];

assign tmp_39_fu_1028_p2 = (p_shl6_cast_fu_1021_p3 + tmp_37_reg_1362);

assign tmp_3_fu_1073_p4 = {{input_assign_to_int_fu_1070_p1[30:23]}};

assign tmp_40_cast_fu_1038_p1 = tmp_40_fu_1033_p2;

assign tmp_40_fu_1033_p2 = (j_2_cast4_cast1_reg_1339 + tmp_39_fu_1028_p2);

assign tmp_4_fu_587_p3 = {{i_reg_320}, {2'd0}};

assign tmp_5_fu_1099_p2 = (notrhs_fu_1093_p2 | notlhs_fu_1087_p2);

assign tmp_7_fu_1105_p2 = (tmp_5_fu_1099_p2 & tmp_6_reg_1446);

assign tmp_8_fu_565_p1 = weights3_fu_555_p4;

assign tmp_s_fu_579_p1 = input1_fu_569_p4;

assign weights3_fu_555_p4 = {{weights[31:2]}};

always @ (posedge ap_clk) begin
    DATA_C_addr_reg_1140[31:30] <= 2'b00;
    tmp_8_reg_1146[31:30] <= 2'b00;
    tmp_s_reg_1151[31:30] <= 2'b00;
    tmp_14_cast_reg_1211[3:0] <= 4'b0000;
    tmp_14_cast_reg_1211[11] <= 1'b0;
    i_2_cast7_reg_1279[31:7] <= 25'b0000000000000000000000000;
    co_cast6_reg_1297[31:7] <= 25'b0000000000000000000000000;
    tmp_23_cast_reg_1303[3:0] <= 4'b0000;
    tmp_23_cast_reg_1303[11] <= 1'b0;
    i_3_cast5_reg_1316[31:3] <= 29'b00000000000000000000000000000;
    i_3_cast5_cast_reg_1321[7:3] <= 5'b00000;
    j_2_cast4_cast1_reg_1339[16:3] <= 14'b00000000000000;
    j_2_cast4_cast_reg_1344[9:3] <= 7'b0000000;
    i_4_cast2_reg_1416[31:7] <= 25'b0000000000000000000000000;
end

endmodule //convolution5
