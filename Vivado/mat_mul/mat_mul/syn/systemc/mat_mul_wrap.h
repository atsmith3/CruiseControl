// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mat_mul_wrap_HH_
#define _mat_mul_wrap_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mat_mul.h"
#include "copy_mat.h"
#include "mat_mul_wrap_matCdEe.h"

namespace ap_rtl {

struct mat_mul_wrap : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > matA_address0;
    sc_out< sc_logic > matA_ce0;
    sc_in< sc_lv<32> > matA_q0;
    sc_out< sc_lv<14> > matB_address0;
    sc_out< sc_logic > matB_ce0;
    sc_in< sc_lv<32> > matB_q0;
    sc_out< sc_lv<14> > matC_address0;
    sc_out< sc_logic > matC_ce0;
    sc_out< sc_logic > matC_we0;
    sc_out< sc_lv<32> > matC_d0;


    // Module declarations
    mat_mul_wrap(sc_module_name name);
    SC_HAS_PROCESS(mat_mul_wrap);

    ~mat_mul_wrap();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mat_mul_wrap_matCdEe* matC_local_U;
    mat_mul_wrap_matCdEe* matB_local_U;
    mat_mul_wrap_matCdEe* matA_local_U;
    mat_mul* grp_mat_mul_fu_30;
    copy_mat* grp_copy_mat_fu_37;
    copy_mat* grp_copy_mat_fu_45;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<14> > matC_local_address0;
    sc_signal< sc_logic > matC_local_ce0;
    sc_signal< sc_logic > matC_local_we0;
    sc_signal< sc_lv<32> > matC_local_q0;
    sc_signal< sc_lv<14> > matB_local_address0;
    sc_signal< sc_logic > matB_local_ce0;
    sc_signal< sc_logic > matB_local_we0;
    sc_signal< sc_lv<32> > matB_local_q0;
    sc_signal< sc_lv<14> > matA_local_address0;
    sc_signal< sc_logic > matA_local_ce0;
    sc_signal< sc_logic > matA_local_we0;
    sc_signal< sc_lv<32> > matA_local_q0;
    sc_signal< sc_logic > grp_mat_mul_fu_30_ap_start;
    sc_signal< sc_logic > grp_mat_mul_fu_30_ap_done;
    sc_signal< sc_logic > grp_mat_mul_fu_30_ap_idle;
    sc_signal< sc_logic > grp_mat_mul_fu_30_ap_ready;
    sc_signal< sc_lv<14> > grp_mat_mul_fu_30_matA_address0;
    sc_signal< sc_logic > grp_mat_mul_fu_30_matA_ce0;
    sc_signal< sc_lv<14> > grp_mat_mul_fu_30_matB_address0;
    sc_signal< sc_logic > grp_mat_mul_fu_30_matB_ce0;
    sc_signal< sc_lv<14> > grp_mat_mul_fu_30_matC_address0;
    sc_signal< sc_logic > grp_mat_mul_fu_30_matC_ce0;
    sc_signal< sc_logic > grp_mat_mul_fu_30_matC_we0;
    sc_signal< sc_lv<32> > grp_mat_mul_fu_30_matC_d0;
    sc_signal< sc_logic > grp_copy_mat_fu_37_ap_start;
    sc_signal< sc_logic > grp_copy_mat_fu_37_ap_done;
    sc_signal< sc_logic > grp_copy_mat_fu_37_ap_idle;
    sc_signal< sc_logic > grp_copy_mat_fu_37_ap_ready;
    sc_signal< sc_lv<14> > grp_copy_mat_fu_37_src_address0;
    sc_signal< sc_logic > grp_copy_mat_fu_37_src_ce0;
    sc_signal< sc_lv<32> > grp_copy_mat_fu_37_src_q0;
    sc_signal< sc_lv<14> > grp_copy_mat_fu_37_dest_address0;
    sc_signal< sc_logic > grp_copy_mat_fu_37_dest_ce0;
    sc_signal< sc_logic > grp_copy_mat_fu_37_dest_we0;
    sc_signal< sc_lv<32> > grp_copy_mat_fu_37_dest_d0;
    sc_signal< sc_logic > grp_copy_mat_fu_45_ap_start;
    sc_signal< sc_logic > grp_copy_mat_fu_45_ap_done;
    sc_signal< sc_logic > grp_copy_mat_fu_45_ap_idle;
    sc_signal< sc_logic > grp_copy_mat_fu_45_ap_ready;
    sc_signal< sc_lv<14> > grp_copy_mat_fu_45_src_address0;
    sc_signal< sc_logic > grp_copy_mat_fu_45_src_ce0;
    sc_signal< sc_lv<14> > grp_copy_mat_fu_45_dest_address0;
    sc_signal< sc_logic > grp_copy_mat_fu_45_dest_ce0;
    sc_signal< sc_logic > grp_copy_mat_fu_45_dest_we0;
    sc_signal< sc_lv<32> > grp_copy_mat_fu_45_dest_d0;
    sc_signal< sc_logic > ap_reg_grp_mat_mul_fu_30_ap_start;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_reg_grp_copy_mat_fu_37_ap_start;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_reg_grp_copy_mat_fu_45_ap_start;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< bool > ap_block_state2_on_subcall_done;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state2_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_copy_mat_fu_37_ap_start();
    void thread_grp_copy_mat_fu_37_src_q0();
    void thread_grp_copy_mat_fu_45_ap_start();
    void thread_grp_mat_mul_fu_30_ap_start();
    void thread_matA_address0();
    void thread_matA_ce0();
    void thread_matA_local_address0();
    void thread_matA_local_ce0();
    void thread_matA_local_we0();
    void thread_matB_address0();
    void thread_matB_ce0();
    void thread_matB_local_address0();
    void thread_matB_local_ce0();
    void thread_matB_local_we0();
    void thread_matC_address0();
    void thread_matC_ce0();
    void thread_matC_d0();
    void thread_matC_local_address0();
    void thread_matC_local_ce0();
    void thread_matC_local_we0();
    void thread_matC_we0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
