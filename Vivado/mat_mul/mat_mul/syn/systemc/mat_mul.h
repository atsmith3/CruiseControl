// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mat_mul_HH_
#define _mat_mul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mat_mul_wrap_fmulbkb.h"
#include "mat_mul_wrap_mac_cud.h"

namespace ap_rtl {

struct mat_mul : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > matA_address0;
    sc_out< sc_logic > matA_ce0;
    sc_in< sc_lv<32> > matA_q0;
    sc_out< sc_lv<14> > matB_address0;
    sc_out< sc_logic > matB_ce0;
    sc_in< sc_lv<32> > matB_q0;
    sc_out< sc_lv<14> > matC_address0;
    sc_out< sc_logic > matC_ce0;
    sc_out< sc_logic > matC_we0;
    sc_out< sc_lv<32> > matC_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    mat_mul(sc_module_name name);
    SC_HAS_PROCESS(mat_mul);

    ~mat_mul();

    sc_trace_file* mVcdFile;

    mat_mul_wrap_fmulbkb<1,4,32,32,32>* mat_mul_wrap_fmulbkb_U2;
    mat_mul_wrap_mac_cud<1,1,7,8,7,14>* mat_mul_wrap_mac_cud_U3;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<14> > next_mul_fu_112_p2;
    sc_signal< sc_lv<14> > next_mul_reg_204;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > i_1_fu_124_p2;
    sc_signal< sc_lv<7> > i_1_reg_212;
    sc_signal< sc_lv<14> > j_cast1_cast_fu_130_p1;
    sc_signal< sc_lv<14> > j_cast1_cast_reg_217;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<14> > matC_addr_reg_222;
    sc_signal< sc_lv<7> > j_1_fu_151_p2;
    sc_signal< sc_lv<7> > j_1_reg_230;
    sc_signal< sc_lv<14> > tmp_2_fu_177_p2;
    sc_signal< sc_lv<14> > tmp_2_reg_238;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > exitcond_fu_157_p2;
    sc_signal< sc_lv<14> > grp_fu_197_p3;
    sc_signal< sc_lv<14> > tmp_4_reg_243;
    sc_signal< sc_lv<7> > k_1_9_fu_183_p2;
    sc_signal< sc_lv<7> > k_1_9_reg_248;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > matA_load_reg_263;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > matB_load_reg_268;
    sc_signal< sc_lv<32> > grp_fu_108_p2;
    sc_signal< sc_lv<32> > tmp_9_reg_273;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<7> > i_reg_63;
    sc_signal< sc_lv<1> > exitcond1_fu_145_p2;
    sc_signal< sc_lv<14> > phi_mul_reg_74;
    sc_signal< sc_lv<7> > j_reg_86;
    sc_signal< sc_lv<1> > exitcond2_fu_118_p2;
    sc_signal< sc_lv<7> > k_reg_97;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<32> > tmp_1_cast_fu_140_p1;
    sc_signal< sc_lv<32> > tmp_2_cast_fu_189_p1;
    sc_signal< sc_lv<32> > tmp_4_cast_fu_193_p1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<14> > tmp_1_fu_134_p2;
    sc_signal< sc_lv<7> > k_1_8_fu_163_p2;
    sc_signal< sc_lv<14> > k_1_8_cast_cast_fu_173_p1;
    sc_signal< sc_lv<7> > grp_fu_197_p0;
    sc_signal< sc_lv<8> > grp_fu_197_p1;
    sc_signal< sc_lv<7> > grp_fu_197_p2;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    sc_signal< sc_lv<14> > grp_fu_197_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<14> ap_const_lv14_64;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<7> ap_const_lv7_9;
    static const sc_lv<7> ap_const_lv7_A;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_145_p2();
    void thread_exitcond2_fu_118_p2();
    void thread_exitcond_fu_157_p2();
    void thread_grp_fu_197_p0();
    void thread_grp_fu_197_p00();
    void thread_grp_fu_197_p1();
    void thread_grp_fu_197_p2();
    void thread_i_1_fu_124_p2();
    void thread_j_1_fu_151_p2();
    void thread_j_cast1_cast_fu_130_p1();
    void thread_k_1_8_cast_cast_fu_173_p1();
    void thread_k_1_8_fu_163_p2();
    void thread_k_1_9_fu_183_p2();
    void thread_matA_address0();
    void thread_matA_ce0();
    void thread_matB_address0();
    void thread_matB_ce0();
    void thread_matC_address0();
    void thread_matC_ce0();
    void thread_matC_d0();
    void thread_matC_we0();
    void thread_next_mul_fu_112_p2();
    void thread_tmp_1_cast_fu_140_p1();
    void thread_tmp_1_fu_134_p2();
    void thread_tmp_2_cast_fu_189_p1();
    void thread_tmp_2_fu_177_p2();
    void thread_tmp_4_cast_fu_193_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
