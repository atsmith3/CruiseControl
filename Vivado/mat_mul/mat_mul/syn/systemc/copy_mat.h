// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _copy_mat_HH_
#define _copy_mat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct copy_mat : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > src_address0;
    sc_out< sc_logic > src_ce0;
    sc_in< sc_lv<32> > src_q0;
    sc_out< sc_lv<14> > dest_address0;
    sc_out< sc_logic > dest_ce0;
    sc_out< sc_logic > dest_we0;
    sc_out< sc_lv<32> > dest_d0;


    // Module declarations
    copy_mat(sc_module_name name);
    SC_HAS_PROCESS(copy_mat);

    ~copy_mat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<14> > next_mul_fu_78_p2;
    sc_signal< sc_lv<14> > next_mul_reg_124;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > i_2_fu_90_p2;
    sc_signal< sc_lv<7> > i_2_reg_132;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<14> > dest_addr_reg_142;
    sc_signal< sc_lv<7> > j_2_fu_118_p2;
    sc_signal< sc_lv<7> > j_2_reg_150;
    sc_signal< sc_lv<7> > i_reg_44;
    sc_signal< sc_lv<1> > exitcond_fu_112_p2;
    sc_signal< sc_lv<14> > phi_mul_reg_55;
    sc_signal< sc_lv<7> > j_reg_67;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > exitcond1_fu_84_p2;
    sc_signal< sc_lv<32> > tmp_5_cast_fu_106_p1;
    sc_signal< sc_lv<14> > j_cast1_cast_fu_96_p1;
    sc_signal< sc_lv<14> > tmp_5_fu_100_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<14> ap_const_lv14_64;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_dest_address0();
    void thread_dest_ce0();
    void thread_dest_d0();
    void thread_dest_we0();
    void thread_exitcond1_fu_84_p2();
    void thread_exitcond_fu_112_p2();
    void thread_i_2_fu_90_p2();
    void thread_j_2_fu_118_p2();
    void thread_j_cast1_cast_fu_96_p1();
    void thread_next_mul_fu_78_p2();
    void thread_src_address0();
    void thread_src_ce0();
    void thread_tmp_5_cast_fu_106_p1();
    void thread_tmp_5_fu_100_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
