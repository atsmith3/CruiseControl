// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mat_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        matA_address0,
        matA_ce0,
        matA_q0,
        matB_address0,
        matB_ce0,
        matB_q0,
        matC_address0,
        matC_ce0,
        matC_we0,
        matC_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] matA_address0;
output   matA_ce0;
input  [31:0] matA_q0;
output  [13:0] matB_address0;
output   matB_ce0;
input  [31:0] matB_q0;
output  [13:0] matC_address0;
output   matC_ce0;
output   matC_we0;
output  [31:0] matC_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg matA_ce0;
reg matB_ce0;
reg matC_ce0;
reg matC_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] next_mul_fu_112_p2;
reg   [13:0] next_mul_reg_204;
wire    ap_CS_fsm_state2;
wire   [6:0] i_1_fu_124_p2;
reg   [6:0] i_1_reg_212;
wire   [13:0] j_cast1_cast_fu_130_p1;
reg   [13:0] j_cast1_cast_reg_217;
wire    ap_CS_fsm_state3;
reg   [13:0] matC_addr_reg_222;
wire   [6:0] j_1_fu_151_p2;
reg   [6:0] j_1_reg_230;
wire   [13:0] tmp_2_fu_177_p2;
reg   [13:0] tmp_2_reg_238;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_157_p2;
wire   [13:0] grp_fu_197_p3;
reg   [13:0] tmp_4_reg_243;
wire   [6:0] k_1_9_fu_183_p2;
reg   [6:0] k_1_9_reg_248;
wire    ap_CS_fsm_state5;
reg   [31:0] matA_load_reg_263;
wire    ap_CS_fsm_state6;
reg   [31:0] matB_load_reg_268;
wire   [31:0] grp_fu_108_p2;
reg   [31:0] tmp_9_reg_273;
wire    ap_CS_fsm_state10;
reg   [6:0] i_reg_63;
wire   [0:0] exitcond1_fu_145_p2;
reg   [13:0] phi_mul_reg_74;
reg   [6:0] j_reg_86;
wire   [0:0] exitcond2_fu_118_p2;
reg   [6:0] k_reg_97;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_1_cast_fu_140_p1;
wire   [31:0] tmp_2_cast_fu_189_p1;
wire   [31:0] tmp_4_cast_fu_193_p1;
wire    ap_CS_fsm_state7;
wire   [13:0] tmp_1_fu_134_p2;
wire   [6:0] k_1_8_fu_163_p2;
wire   [13:0] k_1_8_cast_cast_fu_173_p1;
wire   [6:0] grp_fu_197_p0;
wire   [7:0] grp_fu_197_p1;
wire   [6:0] grp_fu_197_p2;
reg   [10:0] ap_NS_fsm;
wire   [13:0] grp_fu_197_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

mat_mul_wrap_fmulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mat_mul_wrap_fmulbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(matA_load_reg_263),
    .din1(matB_load_reg_268),
    .ce(1'b1),
    .dout(grp_fu_108_p2)
);

mat_mul_wrap_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
mat_mul_wrap_mac_cud_U3(
    .din0(grp_fu_197_p0),
    .din1(grp_fu_197_p1),
    .din2(grp_fu_197_p2),
    .dout(grp_fu_197_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_145_p2 == 1'd1))) begin
        i_reg_63 <= i_1_reg_212;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_63 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond2_fu_118_p2))) begin
        j_reg_86 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_157_p2 == 1'd1))) begin
        j_reg_86 <= j_1_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_145_p2))) begin
        k_reg_97 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        k_reg_97 <= k_1_9_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_145_p2 == 1'd1))) begin
        phi_mul_reg_74 <= next_mul_reg_204;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_74 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_212 <= i_1_fu_124_p2;
        next_mul_reg_204 <= next_mul_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_230 <= j_1_fu_151_p2;
        j_cast1_cast_reg_217[6 : 0] <= j_cast1_cast_fu_130_p1[6 : 0];
        matC_addr_reg_222 <= tmp_1_cast_fu_140_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_157_p2 == 1'd0))) begin
        k_1_9_reg_248 <= k_1_9_fu_183_p2;
        tmp_2_reg_238 <= tmp_2_fu_177_p2;
        tmp_4_reg_243 <= grp_fu_197_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        matA_load_reg_263 <= matA_q0;
        matB_load_reg_268 <= matB_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_9_reg_273 <= grp_fu_108_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_118_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_118_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matA_ce0 = 1'b1;
    end else begin
        matA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matB_ce0 = 1'b1;
    end else begin
        matB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        matC_ce0 = 1'b1;
    end else begin
        matC_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        matC_we0 = 1'b1;
    end else begin
        matC_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_118_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_145_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_157_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign exitcond1_fu_145_p2 = ((j_reg_86 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond2_fu_118_p2 = ((i_reg_63 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond_fu_157_p2 = ((k_reg_97 == 7'd100) ? 1'b1 : 1'b0);

assign grp_fu_197_p0 = grp_fu_197_p00;

assign grp_fu_197_p00 = k_1_8_fu_163_p2;

assign grp_fu_197_p1 = 14'd100;

assign grp_fu_197_p2 = j_cast1_cast_reg_217;

assign i_1_fu_124_p2 = (i_reg_63 + 7'd1);

assign j_1_fu_151_p2 = (j_reg_86 + 7'd1);

assign j_cast1_cast_fu_130_p1 = j_reg_86;

assign k_1_8_cast_cast_fu_173_p1 = k_1_8_fu_163_p2;

assign k_1_8_fu_163_p2 = (k_reg_97 + 7'd9);

assign k_1_9_fu_183_p2 = (k_reg_97 + 7'd10);

assign matA_address0 = tmp_2_cast_fu_189_p1;

assign matB_address0 = tmp_4_cast_fu_193_p1;

assign matC_address0 = matC_addr_reg_222;

assign matC_d0 = tmp_9_reg_273;

assign next_mul_fu_112_p2 = (phi_mul_reg_74 + 14'd100);

assign tmp_1_cast_fu_140_p1 = tmp_1_fu_134_p2;

assign tmp_1_fu_134_p2 = (phi_mul_reg_74 + j_cast1_cast_fu_130_p1);

assign tmp_2_cast_fu_189_p1 = tmp_2_reg_238;

assign tmp_2_fu_177_p2 = (phi_mul_reg_74 + k_1_8_cast_cast_fu_173_p1);

assign tmp_4_cast_fu_193_p1 = tmp_4_reg_243;

always @ (posedge ap_clk) begin
    j_cast1_cast_reg_217[13:7] <= 7'b0000000;
end

endmodule //mat_mul
