// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mat_mul_wrap,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=20202,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=0,HLS_SYN_FF=665,HLS_SYN_LUT=389}" *)

module mat_mul_wrap (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        matA_address0,
        matA_ce0,
        matA_q0,
        matB_address0,
        matB_ce0,
        matB_q0,
        matC_address0,
        matC_ce0,
        matC_we0,
        matC_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] matA_address0;
output   matA_ce0;
input  [31:0] matA_q0;
output  [13:0] matB_address0;
output   matB_ce0;
input  [31:0] matB_q0;
output  [13:0] matC_address0;
output   matC_ce0;
output   matC_we0;
output  [31:0] matC_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] matC_local_q0;
wire    grp_copy_mat_fu_28_ap_start;
wire    grp_copy_mat_fu_28_ap_done;
wire    grp_copy_mat_fu_28_ap_idle;
wire    grp_copy_mat_fu_28_ap_ready;
wire   [13:0] grp_copy_mat_fu_28_src_address0;
wire    grp_copy_mat_fu_28_src_ce0;
wire   [13:0] grp_copy_mat_fu_28_dest_address0;
wire    grp_copy_mat_fu_28_dest_ce0;
wire    grp_copy_mat_fu_28_dest_we0;
wire   [31:0] grp_copy_mat_fu_28_dest_d0;
wire    grp_copy_mat_fu_36_ap_start;
wire    grp_copy_mat_fu_36_ap_done;
wire    grp_copy_mat_fu_36_ap_idle;
wire    grp_copy_mat_fu_36_ap_ready;
wire   [13:0] grp_copy_mat_fu_36_src_address0;
wire    grp_copy_mat_fu_36_src_ce0;
wire   [13:0] grp_copy_mat_fu_36_dest_address0;
wire    grp_copy_mat_fu_36_dest_ce0;
wire    grp_copy_mat_fu_36_dest_we0;
wire   [31:0] grp_copy_mat_fu_36_dest_d0;
wire    grp_copy_mat_fu_44_ap_start;
wire    grp_copy_mat_fu_44_ap_done;
wire    grp_copy_mat_fu_44_ap_idle;
wire    grp_copy_mat_fu_44_ap_ready;
wire   [13:0] grp_copy_mat_fu_44_src_address0;
wire    grp_copy_mat_fu_44_src_ce0;
wire   [13:0] grp_copy_mat_fu_44_dest_address0;
wire    grp_copy_mat_fu_44_dest_ce0;
wire    grp_copy_mat_fu_44_dest_we0;
wire   [31:0] grp_copy_mat_fu_44_dest_d0;
reg    ap_reg_grp_copy_mat_fu_28_ap_start;
wire    ap_CS_fsm_state2;
reg    ap_reg_grp_copy_mat_fu_36_ap_start;
reg    ap_reg_grp_copy_mat_fu_44_ap_start;
reg    ap_block_state2_on_subcall_done;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_reg_grp_copy_mat_fu_28_ap_start = 1'b0;
#0 ap_reg_grp_copy_mat_fu_36_ap_start = 1'b0;
#0 ap_reg_grp_copy_mat_fu_44_ap_start = 1'b0;
end

mat_mul_wrap_matCbkb #(
    .DataWidth( 32 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
matC_local_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_copy_mat_fu_44_src_address0),
    .ce0(grp_copy_mat_fu_44_src_ce0),
    .q0(matC_local_q0)
);

mat_mul_wrap_matBcud #(
    .DataWidth( 32 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
matB_local_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_copy_mat_fu_36_dest_address0),
    .ce0(grp_copy_mat_fu_36_dest_ce0),
    .we0(grp_copy_mat_fu_36_dest_we0),
    .d0(grp_copy_mat_fu_36_dest_d0)
);

mat_mul_wrap_matBcud #(
    .DataWidth( 32 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
matA_local_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_copy_mat_fu_28_dest_address0),
    .ce0(grp_copy_mat_fu_28_dest_ce0),
    .we0(grp_copy_mat_fu_28_dest_we0),
    .d0(grp_copy_mat_fu_28_dest_d0)
);

copy_mat grp_copy_mat_fu_28(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_copy_mat_fu_28_ap_start),
    .ap_done(grp_copy_mat_fu_28_ap_done),
    .ap_idle(grp_copy_mat_fu_28_ap_idle),
    .ap_ready(grp_copy_mat_fu_28_ap_ready),
    .src_address0(grp_copy_mat_fu_28_src_address0),
    .src_ce0(grp_copy_mat_fu_28_src_ce0),
    .src_q0(matA_q0),
    .dest_address0(grp_copy_mat_fu_28_dest_address0),
    .dest_ce0(grp_copy_mat_fu_28_dest_ce0),
    .dest_we0(grp_copy_mat_fu_28_dest_we0),
    .dest_d0(grp_copy_mat_fu_28_dest_d0)
);

copy_mat grp_copy_mat_fu_36(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_copy_mat_fu_36_ap_start),
    .ap_done(grp_copy_mat_fu_36_ap_done),
    .ap_idle(grp_copy_mat_fu_36_ap_idle),
    .ap_ready(grp_copy_mat_fu_36_ap_ready),
    .src_address0(grp_copy_mat_fu_36_src_address0),
    .src_ce0(grp_copy_mat_fu_36_src_ce0),
    .src_q0(matB_q0),
    .dest_address0(grp_copy_mat_fu_36_dest_address0),
    .dest_ce0(grp_copy_mat_fu_36_dest_ce0),
    .dest_we0(grp_copy_mat_fu_36_dest_we0),
    .dest_d0(grp_copy_mat_fu_36_dest_d0)
);

copy_mat grp_copy_mat_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_copy_mat_fu_44_ap_start),
    .ap_done(grp_copy_mat_fu_44_ap_done),
    .ap_idle(grp_copy_mat_fu_44_ap_idle),
    .ap_ready(grp_copy_mat_fu_44_ap_ready),
    .src_address0(grp_copy_mat_fu_44_src_address0),
    .src_ce0(grp_copy_mat_fu_44_src_ce0),
    .src_q0(matC_local_q0),
    .dest_address0(grp_copy_mat_fu_44_dest_address0),
    .dest_ce0(grp_copy_mat_fu_44_dest_ce0),
    .dest_we0(grp_copy_mat_fu_44_dest_we0),
    .dest_d0(grp_copy_mat_fu_44_dest_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_copy_mat_fu_28_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_copy_mat_fu_28_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_mat_fu_28_ap_ready)) begin
            ap_reg_grp_copy_mat_fu_28_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_copy_mat_fu_36_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_copy_mat_fu_36_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_mat_fu_36_ap_ready)) begin
            ap_reg_grp_copy_mat_fu_36_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_copy_mat_fu_44_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_copy_mat_fu_44_ap_start <= 1'b1;
        end else if ((1'b1 == grp_copy_mat_fu_44_ap_ready)) begin
            ap_reg_grp_copy_mat_fu_44_ap_start <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_on_subcall_done == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_on_subcall_done == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((1'b0 == grp_copy_mat_fu_28_ap_done) | (1'b0 == grp_copy_mat_fu_36_ap_done) | (1'b0 == grp_copy_mat_fu_44_ap_done));
end

assign grp_copy_mat_fu_28_ap_start = ap_reg_grp_copy_mat_fu_28_ap_start;

assign grp_copy_mat_fu_36_ap_start = ap_reg_grp_copy_mat_fu_36_ap_start;

assign grp_copy_mat_fu_44_ap_start = ap_reg_grp_copy_mat_fu_44_ap_start;

assign matA_address0 = grp_copy_mat_fu_28_src_address0;

assign matA_ce0 = grp_copy_mat_fu_28_src_ce0;

assign matB_address0 = grp_copy_mat_fu_36_src_address0;

assign matB_ce0 = grp_copy_mat_fu_36_src_ce0;

assign matC_address0 = grp_copy_mat_fu_44_dest_address0;

assign matC_ce0 = grp_copy_mat_fu_44_dest_ce0;

assign matC_d0 = grp_copy_mat_fu_44_dest_d0;

assign matC_we0 = grp_copy_mat_fu_44_dest_we0;

endmodule //mat_mul_wrap
