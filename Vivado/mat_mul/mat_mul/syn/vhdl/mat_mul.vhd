-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mat_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    matA_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    matA_ce0 : OUT STD_LOGIC;
    matA_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    matB_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    matB_ce0 : OUT STD_LOGIC;
    matB_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    matC_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    matC_ce0 : OUT STD_LOGIC;
    matC_we0 : OUT STD_LOGIC;
    matC_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mat_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv7_A : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_112_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_204 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_124_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_212 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast1_cast_fu_130_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_cast1_cast_reg_217 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal matC_addr_reg_222 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_1_fu_151_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_230 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_177_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_reg_238 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_197_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_reg_243 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_1_9_fu_183_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_9_reg_248 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal matA_load_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal matB_load_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_reg_63 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_74 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_reg_86 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond2_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_97 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_1_cast_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_fu_134_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_1_8_fu_163_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_8_cast_cast_fu_173_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_197_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_197_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_197_p00 : STD_LOGIC_VECTOR (13 downto 0);

    component mat_mul_wrap_fmulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mat_mul_wrap_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    mat_mul_wrap_fmulbkb_U2 : component mat_mul_wrap_fmulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => matA_load_reg_263,
        din1 => matB_load_reg_268,
        ce => ap_const_logic_1,
        dout => grp_fu_108_p2);

    mat_mul_wrap_mac_cud_U3 : component mat_mul_wrap_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_197_p0,
        din1 => grp_fu_197_p1,
        din2 => grp_fu_197_p2,
        dout => grp_fu_197_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_63_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then 
                i_reg_63 <= i_1_reg_212;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_63 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond2_fu_118_p2))) then 
                j_reg_86 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_157_p2 = ap_const_lv1_1))) then 
                j_reg_86 <= j_1_reg_230;
            end if; 
        end if;
    end process;

    k_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_145_p2))) then 
                k_reg_97 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_reg_97 <= k_1_9_reg_248;
            end if; 
        end if;
    end process;

    phi_mul_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_74 <= next_mul_reg_204;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_74 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_212 <= i_1_fu_124_p2;
                next_mul_reg_204 <= next_mul_fu_112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_230 <= j_1_fu_151_p2;
                    j_cast1_cast_reg_217(6 downto 0) <= j_cast1_cast_fu_130_p1(6 downto 0);
                matC_addr_reg_222 <= tmp_1_cast_fu_140_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_157_p2 = ap_const_lv1_0))) then
                k_1_9_reg_248 <= k_1_9_fu_183_p2;
                tmp_2_reg_238 <= tmp_2_fu_177_p2;
                tmp_4_reg_243 <= grp_fu_197_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                matA_load_reg_263 <= matA_q0;
                matB_load_reg_268 <= matB_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_9_reg_273 <= grp_fu_108_p2;
            end if;
        end if;
    end process;
    j_cast1_cast_reg_217(13 downto 7) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_fu_157_p2, exitcond1_fu_145_p2, exitcond2_fu_118_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond2_fu_118_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_145_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_157_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_118_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond2_fu_118_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_118_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond2_fu_118_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_145_p2 <= "1" when (j_reg_86 = ap_const_lv7_64) else "0";
    exitcond2_fu_118_p2 <= "1" when (i_reg_63 = ap_const_lv7_64) else "0";
    exitcond_fu_157_p2 <= "1" when (k_reg_97 = ap_const_lv7_64) else "0";
    grp_fu_197_p0 <= grp_fu_197_p00(7 - 1 downto 0);
    grp_fu_197_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_8_fu_163_p2),14));
    grp_fu_197_p1 <= ap_const_lv14_64(8 - 1 downto 0);
    grp_fu_197_p2 <= j_cast1_cast_reg_217(7 - 1 downto 0);
    i_1_fu_124_p2 <= std_logic_vector(unsigned(i_reg_63) + unsigned(ap_const_lv7_1));
    j_1_fu_151_p2 <= std_logic_vector(unsigned(j_reg_86) + unsigned(ap_const_lv7_1));
    j_cast1_cast_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_86),14));
    k_1_8_cast_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_8_fu_163_p2),14));
    k_1_8_fu_163_p2 <= std_logic_vector(unsigned(k_reg_97) + unsigned(ap_const_lv7_9));
    k_1_9_fu_183_p2 <= std_logic_vector(unsigned(k_reg_97) + unsigned(ap_const_lv7_A));
    matA_address0 <= tmp_2_cast_fu_189_p1(14 - 1 downto 0);

    matA_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            matA_ce0 <= ap_const_logic_1;
        else 
            matA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    matB_address0 <= tmp_4_cast_fu_193_p1(14 - 1 downto 0);

    matB_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            matB_ce0 <= ap_const_logic_1;
        else 
            matB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    matC_address0 <= matC_addr_reg_222;

    matC_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            matC_ce0 <= ap_const_logic_1;
        else 
            matC_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    matC_d0 <= tmp_9_reg_273;

    matC_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            matC_we0 <= ap_const_logic_1;
        else 
            matC_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_112_p2 <= std_logic_vector(unsigned(phi_mul_reg_74) + unsigned(ap_const_lv14_64));
    tmp_1_cast_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_134_p2),32));
    tmp_1_fu_134_p2 <= std_logic_vector(unsigned(phi_mul_reg_74) + unsigned(j_cast1_cast_fu_130_p1));
    tmp_2_cast_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_238),32));
    tmp_2_fu_177_p2 <= std_logic_vector(unsigned(phi_mul_reg_74) + unsigned(k_1_8_cast_cast_fu_173_p1));
    tmp_4_cast_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_243),32));
end behav;
